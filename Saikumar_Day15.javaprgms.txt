#1 LeapYear Example

import java.time.LocalDate;
public class LeapYearExample{
	public static void main(String[] args){
	LocalDate date1= LocalDate.of(2017,1,13);
	System.out.println(date1.isLeapYear());
	LocalDate date2=LocalDate.of(2016,9,23);
	System.out.println(date2.isLeapYear());
	}
}

Output:
false
true
------------------------------------------------------
#2 LocalDate Example

import java.time.*;  
public class LocalDateExample {  
  public static void main(String[] args) {  
    LocalDate date = LocalDate.of(2017, 1, 13);  
    LocalDateTime datetime = date.atTime(1,50,9);      
    System.out.println(datetime);   
  }  
}  

Output:
2017-01-13T01:50:09
------------------------------------------------------
#3 LocalDate Example1

import java.time.LocalDate;
public class LocalDateExample1 {
	public static void  main(String[] args){
		LocalDate date =LocalDate.now();
		LocalDate yesterday=date.minusDays(1);
		LocalDate tomorrow =yesterday.plusDays(2);
		System.out.println("Today date:"+date);
		System.out.println("yesterday date:"+yesterday);
		System.out.println("Tomorrow date:"+tomorrow);
	}
}

Output:
Today date:2022-05-31
yesterday date:2022-05-30
Tomorrow date:2022-06-01
------------------------------------------------------
#4 LocalDateFormat Example

import java.time.LocalDate;  
import java.time.format.DateTimeFormatter;  
public class LocalDateFormatExample  
{  
    public static void main(String ar[])  
    {  
        // Converting LocalDate to String  
        // Example 1  
        LocalDate d1 = LocalDate.now();  
        String d1Str = d1.format(DateTimeFormatter.ISO_DATE);  
        System.out.println("Date1 in string :  " + d1Str);  
        // Example 2  
        LocalDate d2 = LocalDate.of(2002, 05, 01);  
        String d2Str = d2.format(DateTimeFormatter.ISO_DATE);  
        System.out.println("Date2 in string :  " + d2Str);  
        // Example 3  
        LocalDate d3 = LocalDate.of(2016, 11, 01);  
        String d3Str = d3.format(DateTimeFormatter.ISO_DATE);  
        System.out.println("Date3 in string :  " + d3Str);  
    }  
}  

Output:
Date1 in string :  2022-05-31
Date2 in string :  2002-05-01
Date3 in string :  2016-11-01
------------------------------------------------------
#5 LocalTime Example2

mport java.time.LocalTime;  
public class LocalTimeExample2 {  
  public static void main(String[] args) {  
    LocalTime time1 = LocalTime.of(10,43,12);  
    System.out.println("Original time :"+time1);  
    LocalTime time2=time1.minusHours(2);  
    LocalTime time3=time2.minusMinutes(34);  
    System.out.println("Minus Time :"+time3);  
    LocalTime time4=time1.plusHours(4);  
    LocalTime time5=time4.plusMinutes(18);  
    System.out.println("Plus time :"+time5);  
  }  
}  

Output:
Original time :10:43:12
Minus Time :08:09:12
Plus time :15:01:12
------------------------------------------------------
#6 NumericStreams Example

import java.util.Objects;
import java.util.ArrayList;
import java.util.List;
import java.util.OptionalDouble;
class Employee {
 private int id;
 private String firstName;
 private String lastName;
 private int age;
 private String city;
 private double salary;

 public Employee(int id, String firstName, String lastName, int age,
   String city, double salary) {
  super();
  this.id = id;
  this.firstName = firstName;
  this.lastName = lastName;
  this.age = age;
  this.city = city;
  this.salary = salary;
 }

 public int getId() {
  return id;
 }

 public void setId(int id) {
  this.id = id;
 }

 public String getFirstName() {
  return firstName;
 }

 public void setFirstName(String firstName) {
  this.firstName = firstName;
 }

 public String getLastName() {
  return lastName;
 }

 public void setLastName(String lastName) {
  this.lastName = lastName;
 }

 public int getAge() {
  return age;
 }

 public void setAge(int age) {
  this.age = age;
 }

 public String getCity() {
  return city;
 }

 public void setCity(String city) {
  this.city = city;
 }

 public double getSalary() {
  return salary;
 }

 public void setSalary(double salary) {
  this.salary = salary;
 }

 @Override
 public boolean equals(Object employee) {
  if (Objects.isNull(employee))
   return false;

  if (!(employee instanceof Employee))
   return false;

  Employee emp = (Employee) employee;

  return id == emp.id;
 }

 @Override
 public int hashCode() {
  return Objects.hash(id, firstName, lastName, age);
 }

 @Override
 public String toString() {
  return String.format("%s(%s,%d,%f)", firstName, city, age, salary);
 }

}
public class NumericStreamsExample {
 public static List<Employee> getEmployees() {
  Employee emp1 = new Employee(1, "Hari Krishna", "Gurram", 26,
    "Bangalore", 40000);
  Employee emp2 = new Employee(2, "Joel", "Chelli", 27, "Hyderabad",
    50000);
  Employee emp3 = new Employee(3, "Shanmukh", "Kummary", 28, "Chennai",
    35000);
  Employee emp4 = new Employee(4, "Harika", "Raghuram", 27, "Chennai",
    76000);
  Employee emp5 = new Employee(5, "Sudheer", "Ganji", 27, "Bangalore",
    90000);
  Employee emp6 = new Employee(6, "Rama Krishna", "Gurram", 27,
    "Bangalore", 56700);
  Employee emp7 = new Employee(7, "PTR", "PTR", 27, "Hyderabad", 123456);
  Employee emp8 = new Employee(8, "Siva krishna", "Ponnam", 28,
    "Hyderabad", 98765);
  Employee emp9 = new Employee(9, "Raju", "Antony", 40, "Trivendram",
    198765);

  Employee emp10 = new Employee(10, "Brijesh", "Krishnan", 34,
    "Trivendram", 100000);
  Employee emp11 = new Employee(9, "Raju", "Antony", 40, "Trivendram",
    198765);

  Employee emp12 = new Employee(10, "Brijesh", "Krishnan", 34,
    "Trivendram", 100000);

  List<Employee> employees = new ArrayList<>();

  employees.add(emp1);
  employees.add(emp2);
  employees.add(emp3);
  employees.add(emp4);
  employees.add(emp5);
  employees.add(emp6);
  employees.add(emp7);
  employees.add(emp8);
  employees.add(emp9);
  employees.add(emp10);
  employees.add(emp11);
  employees.add(emp12);

  return employees;
 }

 public static void main(String args[]) {
  List<Employee> employees = getEmployees();

  /* Get sum of all employee salaries */
  double totalSalary = employees.stream()
    .mapToDouble(Employee::getSalary).sum();

  /* Minimum salary */
  OptionalDouble minSalary = employees.stream()
    .mapToDouble(Employee::getSalary).min();

  /* Maximum salary */
  OptionalDouble maxSalary = employees.stream()
    .mapToDouble(Employee::getSalary).max();

  /* Average salary */
  OptionalDouble avgSalary = employees.stream()
    .mapToDouble(Employee::getSalary).average();

  System.out.println("Total Salary : " + totalSalary);
  System.out.println("Minimum Salary : " + minSalary.getAsDouble());
  System.out.println("Maximum Salary : " + maxSalary.getAsDouble());
  System.out.println("Average Salary : " + avgSalary.getAsDouble());
 }
}

Total Salary : 1167451.0
Minimum Salary : 35000.0
Maximum Salary : 198765.0
------------------------------------------------------
#7 ParallelStreams Example1

//using parallel()method on a stream
//importing required classes
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.stream.Stream;


//Main class
//parallelStreamTest
public class ParallelStreamsExample1{

	//Main driver method
	public static  void main(String[] args)throws IOException{
	


		//creating a file object
		File FileName = new File("C:\\Users\\vk67972\\Desktop\\file1.txt");



		//creating a stream of string type
		//using the lines()method to
		//read one line at a time from the text file
		Stream<String>text =Files.lines(FileName.toPath());

		
		//creatiing parallel stream using parallel()method
		//later using forEach() to print on console
		text.parallel().forEach(System.out::println);


		//Closing the stream
		//using close ()method
		text.close();
	}
}

Output:
	Java File Parallel Stream class
------------------------------------------------------
#8  ParallelStream Example2

//importing required classes
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.*;

//main class
//parallelStreamTest
public class ParallelStreamExample2{
     
            //main driver method
		public static void main(String[] args)
				throws IOException
		{
		
		//crreating a file object
		File FileName
			=new File("C:\\\\Users\\\\vk67972\\\\Desktop\\\\file1.txt");

		//Reading the line of text file by
		//creating a List using readAllLines()method
		List<String>text
			=Files.readAllLines(FileName.toPath());

			//creating parallel stream by creating a List
			//using readAllLines()method

			text.parallelStream().forEach(System.out::println);
		}
	}

Output:
	Java File Parallel Stream class
------------------------------------------------------
#9 LocalTime Example1

import java.time.LocalTime;
public class localTimeExample1{
public static void main(String[] args){
LocalTime time = LocalTime.now();
System.out.println("LocalTime Example for now : "+time);
LocalTime time2=LocalTime.of(10,43,12);
System.out.println("Local time Example for of :"+time2);
}
}

Output:
LocalTime Example for now : 15:00:01.434242600
Local time Example for of :10:43:12


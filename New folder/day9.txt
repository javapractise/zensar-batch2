1. Program with try and catch & finally block

public class FinallyBlock {
    public static void main(String[] args) {
        try{
            int data=25/5;
            System.out.println(data);
        }
        catch(NullPointerException e){
            System.out.println(e);
        }
        finally {
            System.out.println("finally block is always executed");
        }

        System.out.println("rest of phe code...");
    }
}


2. Program for multiple catch with single try


public class MultiCatch {
    public static void main(String[] args) {
        try{
            int a[]=new int[5];
            a[5]=30/0;
        }catch(ArithmeticException e)
        {
            System.out.println("Arithmetic Exception occurs");
        }
               catch(ArrayIndexOutOfBoundsException e)
        {
            System.out.println("ArrayIndexOutOfBounds Exception occurs");
        }
               catch(Exception e)
        {
            System.out.println("Parent Exception occurs");
        }
        System.out.println("rest of the code");
    }
}

3. Program illustrating throws keyword

class Throws{  
  void m()throws IOException{  
    throw new IOException("device error");//checked exception  
  }  
  void n()throws IOException{  
    m();  
  }  
  void p(){  
   try{  
    n();  
   }catch(Exception e){System.out.println("exception handled");}  
  }  
  public static void main(String args[]){  
   Testthrows1 obj=new Testthrows1();  
   obj.p();  
   System.out.println("normal flow...");  
  }  
}  


4. Program for chained exception


public class ExceptionHandling
{
	public static void main(String[] args)
	{
		try
		{
			NumberFormatException ex =
					new NumberFormatException("Exception");
			ex.initCause(new NullPointerException(
					"This is actual cause of the exception"));
			throw ex;
		}

		catch(NumberFormatException ex)
		{
			System.out.println(ex);
			System.out.println(ex.getCause());
		}
	}
}



5. Program to create custom exception

class MyCustomException extends Exception  
{  
    
}   
public class TestCustomException2  
{    
    public static void main(String args[])  
    {  
        try  
        {    
            throw new MyCustomException();  
        }  
        catch (MyCustomException ex)  
        {  
            System.out.println("Caught the exception");  
            System.out.println(ex.getMessage());  
        }  
  
        System.out.println("rest of the code...");    
    }  
}  



1) Java Program to count the total number of characters in a string.

public class CountString {
    public static void main(String[] args) {
        String String ="word";
        int count =0;
        for(int i = 0; i < String.length(); i++) {
            if(String.charAt(i) != ' ')
                count++;
        }
        System.out.println("Total number of characters in a string: " + count);
    }
}

2) Java Program to count the total number of characters in a string 2.

public class CountString {
    public static void main(String[] args) {
        String s1="Venkat";
        String s2="Vinay";
        int count1=0,count2=0;
        for(int i=0;i<s1.length();i++){
            if(s1.charAt(i)!=' '){
                count1=count1+1;
            }

        }System.out.println("Character count of String s1:"+ count1);
        for(int i=0;i<s2.length();i++){
            if(s2.charAt(i)!= ' '){
                count2=count2+1;
            }

        }System.out.println("Character count of String s1:"+ count2);
    }
}

3) Java Program to count the total number of punctuation characters exists in a String.

public class punctuation {  
    public static void main (String [] args) {  
        int countPuncMarks = 0;  
        String str = "Good Morning! Mr. James Potter. Had your breakfast?";  
        for (int i = 0; i < str.length(); i++) {  
                //Checks whether given character is punctuation mark  
            if(str.charAt(i) == '!' || str.charAt(i) == ',' || str.charAt(i) == ';' || str.charAt(i) == '.' ||        str.charAt(i) == '?' || str.charAt(i) == '-' ||  
                    str.charAt(i) == '\'' || str.charAt(i) == '\"' || str.charAt(i) == ':') {  
                countPuncMarks++;  
            }  
        }  
        System.out.println("Total number of punctuation characters exists in string: " +        countPuncMarks);  
    }  
}  

4)Java Program to count the total number of vowels and consonants in a string.

public class CountVowelConsonant {    
    public static void main(String[] args) {     
        int vCount = 0, cCount = 0;       
        String str = "This is a really simple sentence";    
            
       
        str = str.toLowerCase();    
            
        for(int i = 0; i < str.length(); i++) {        
            if(str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') {       
                vCount++;    
            }    
            else if(str.charAt(i) >= 'a' && str.charAt(i)<='z') {          
                cCount++;    
            }    
        }    
        System.out.println("Number of vowels: " + vCount);    
        System.out.println("Number of consonants: " + cCount);    
    }    
}   

5) Java Program to determine whether two strings are the anagram.

import java.util.Arrays;  
public class Anagram {  
    public static void main (String [] args) {  
        String str1="Brag";  
        String str2="Grab";  
  
        //Converting both the string to lower case.  
        str1 = str1.toLowerCase();  
        str2 = str2.toLowerCase();  
  
        //Checking for the length of strings  
        if (str1.length() != str2.length()) {  
            System.out.println("Both the strings are not anagram");  
        }  
        else {  
            //Converting both the arrays to character array  
            char[] string1 = str1.toCharArray();  
            char[] string2 = str2.toCharArray();  
  
            //Sorting the arrays using in-built function sort ()  
            Arrays.sort(string1);  
            Arrays.sort(string2);  
  
            //Comparing both the arrays using in-built function equals ()  
            if(Arrays.equals(string1, string2) == true) {  
                System.out.println("Both the strings are anagram");  
            }  
            else {  
                System.out.println("Both the strings are not anagram");  
            }  
        }  
    }  
}

6)Java Program to divide a string in 'N' equal parts.   

public class DivideString {  
    public static void main(String[] args) {  
          String str = "aaaabbbbcccc";  
  
        //Stores the length of the string  
        int len = str.length();  
        //n determines the variable that divide the string in 'n' equal parts  
        int n = 3;  
        int temp = 0, chars = len/n;  
        //Stores the array of string  
        String[] equalStr = new String [n];  
        //Check whether a string can be divided into n equal parts  
        if(len % n != 0) {  
            System.out.println("Sorry this string cannot be divided into "+ n +" equal parts.");  
        }  
        else {  
            for(int i = 0; i < len; i = i+chars) {  
                //Dividing string in n equal part using substring()  
                String part = str.substring(i, i+chars);  
                equalStr[temp] = part;  
                temp++;  
            }  
    System.out.println(n + " equal parts of given string are ");  
            for(int i = 0; i < equalStr.length; i++) {  
                System.out.println(equalStr[i]);  
                }  
            }  
        }
}

7) Java Program to find all subsets of a string.  

public class AllSubsets {  
    public static void main(String[] args) {  
  
        String str = "FUN";  
        int len = str.length();  
        int temp = 0;  
         
        String arr[] = new String[len*(len+1)/2];  
  
        for(int i = 0; i < len; i++) {  
            for(int j = i; j < len; j++) {  
                arr[temp] = str.substring(i, j+1);  
                temp++;  
            }  
        }  
  
        System.out.println("All subsets for given string are: ");  
        for(int i = 0; i < arr.length; i++) {  
            System.out.println(arr[i]);  
        }  
    }  

8) Java Program to find the longest repeating sequence in a string.

public class LongestRepeatingSequence {  
    public static String lcp(String s, String t){  
        int n = Math.min(s.length(),t.length());  
        for(int i = 0; i < n; i++){  
            if(s.charAt(i) != t.charAt(i)){  
                return s.substring(0,i);  
            }  
        }  
        return s.substring(0,n);  
    }  
  
    public static void main(String[] args) {  
        String str = "acbdfghybdf";  
        String lrs="";  
        int n = str.length();  
        for(int i = 0; i < n; i++){  
            for(int j = i+1; j < n; j++){    
                String x = lcp(str.substring(i,n),str.substring(j,n));  
                if(x.length() > lrs.length()) lrs=x;  
            }  
        }  
        System.out.println("Longest repeating sequence: "+lrs);  
    }  
}  

9) Java Program to find all the permutations of a string.

public class PermuteString {        
    public static String swapString(String a, int i, int j) {    
        char[] b =a.toCharArray();    
        char ch;    
        ch = b[i];    
        b[i] = b[j];    
        b[j] = ch;    
        return String.valueOf(b);    
    }    
        
    public static void main(String[] args)    
    {    
        String str = "ABC";    
        int len = str.length();    
        System.out.println("All the permutations of the string are: ");    
        generatePermutation(str, 0, len);    
    }    
          
    public static void generatePermutation(String str, int start, int end)    
    {    
          
        if (start == end-1)    
            System.out.println(str);    
        else    
        {    
            for (int i = start; i < end; i++)    
            {    
                //Swapping the string by fixing a character    
                str = swapString(str,start,i);    
                //Recursively calling function generatePermutation() for rest of the characters     
                generatePermutation(str,start+1,end);        
                str = swapString(str,start,i);    
            }    
        }    
    }    
}    

10) Java Program to remove all the white spaces.

public class RemoveAllSpace {  
    public static void main(String[] args) {  
        String str = "India     Is My    Country";    
        String noSpaceStr = str.replaceAll("\\s", "");
        System.out.println(noSpaceStr);  
        char[] strArray = str.toCharArray();  
        StringBuffer stringBuffer = new StringBuffer();  
        for (int i = 0; i < strArray.length; i++) {  
            if ((strArray[i] != ' ') && (strArray[i] != '\t')) {  
                stringBuffer.append(strArray[i]);  
            }  
        }  
        String noSpaceStr2 = stringBuffer.toString();  
        System.out.println(noSpaceStr2);  
    }  
}   
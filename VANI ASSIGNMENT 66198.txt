class A 
{ 
int a, b; 
void display() 
{ 
System.out.println(“Inside class A values =”+a+” ”+b); 
} 
} 
class B extends A 
{ 
int c; 
void show() 
{ 
System.out.println(“Inside Class B values=”+a+” “+b+” “+c);  
} 
} 

SINGLE INHERTTANCE

class SingleInheritance 
{ 
public static void main(String args[]) 
{ 
B obj = new B(); //derived class object 
obj.a=10; 
obj.b=20; 
obj.c=30; 
obj.display(); 
obj.show(); 
} 
} 

MULTIPLE INHERITANCE:

class Parent  
{  
public void M1()  
{  
class Parent 
{ 
public void M1() 
{ 
System.out.println(“Parent Class Method”); 
} 
} 
class Child extends Parent 
{ 
public void M2() 
{ 
System.out.println(“Child Class Method”); 
} 
} 


class Inh_In_Java 
{ 
public static void main(String[] args) 
{
Parent p=new Parent(); 
p.M1(); 
p.M2();  
} 
}  

class Parent 
{
class Parent 
{ 
public void M1() { 
System.out.println(“Parent Class Method”);
 } 
}
 class Child extends Parent {
 public void M2() { 
System.out.println(“Child Class Method”);
 }
} 
class Inh_In_Java { 
public static void main(String[] args)

MULTILEVEL INHERTANCE:

class Car
{
 public Car() 
{
 System.out... by Chaitanya Alladi

class Car{
   public Car()
   {
	System.out.println("Class Car");
   }
   public void vehicleType()
   {
	System.out.println("Vehicle Type: Car");
   }
}
class Maruti extends Car{
   public Maruti()
   {
	System.out.println("Class Maruti");
   }
   public void brand()
   {
	System.out.println("Brand: Maruti");
   }
   public void speed()
   {
	System.out.println("Max: 90Kmph");
   }
}
class Maruti800 extends Maruti{

   public Maruti800()
   {
	System.out.println("Maruti Model: 800");
   }
   public void speed()
   {
	System.out.println("Max: 80Kmph");
   }
   public static void main(String args[])
   {
	 Maruti800 obj=new Maruti800();
	 obj.vehicleType();
	 obj.brand();
	 obj.speed();
   }
}

HIERARCHICAL INHERITANCE:

public class HierarchicalInheritance 
{
public static void main(String[] args) 
{

  B b = new B();
  b.printA();
  b.printB();System.out.println("--------------");

  C c = new C();
  c.printA();
  c.printC();System.out.println("--------------");

  D d = new D();
  c.printA();
  c.printC();
}
}
class A
 {
public void printA() 
{
System.out.println("PrintA method.");
}
}
class B extends A {
public void printB() {
System.out.println("PrintB method.");
}
}
class C extends A {
public void printC() {
System.out.println("PrintC method.");
}
}
class D extends A {
public void printD() 
{
System.out.println("PrintD method.");
}
}

HYBRID INHERTIANCE

class Parent  
{  
public void M1()  
{  
class Parent 
{ 
public void M1() 
{ 
System.out.println(“Parent Class Method”); 
} 
} 
class Child extends Parent 
{ 
public void M2() 
{ 
System.out.println(“Child Class Method”); 
} 
} 


class Inh_In_Java 
{ 
public static void main(String[] args) 
{
Parent p=new Parent(); 
p.M1(); 
p.M2();  
} 
}  

class Parent 
{
class Parent 
{ 
public void M1() { 
System.out.println(“Parent Class Method”);
 } 
}
 class Child extends Parent {
 public void M2() { 
System.out.println(“Child Class Method”);
 }
} 
class Inh_In_Java { 
public static void main(String[] args)


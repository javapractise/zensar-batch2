package Day11;

	public class TestDaemon extends Thread
	{  
		 public void run()
		 {  
			 if(Thread.currentThread().isDaemon())
			 {  
				 System.out.println("daemon thread work");  
			 }  
		  	 else
		  	 {  
		  		System.out.println("user thread work");  
		  	 }  
		 }  
		 public static void main(String[] args)
		 {  
			 TestDaemon t1=new TestDaemon(); 
			 TestDaemon t2=new TestDaemon();  
			 TestDaemon t3=new TestDaemon();  
		  
			 t1.setDaemon(true);
		    
			 t1.start();  
			 t2.start();  
			 t3.start();  
		 }  
	}  

-----------------

output:
daemon thread work
user thread work
user thread work


----------------------------------------------------------

package Day11;

	class TestDaemon1 extends Thread
	{  
		 public void run()
		 {  
			 System.out.println("Name: "+Thread.currentThread().getName());  
			 System.out.println("Daemon: "+Thread.currentThread().isDaemon());  
		 }  
		  
		 public static void main(String[] args)
		 {  
			 TestDaemon1 t1=new TestDaemon1();  
			 TestDaemon1 t2=new TestDaemon1();  
			 t1.start();  
			 t1.setDaemon(true);//will throw exception here  
			 t2.start();  
		 }  
	} 


------------------------------
output:

exception in thread main: java.lang.IllegalThreadStateException


----------------------------------------------------------------

package Day11;

import java.lang.*;
	   
	public class ThreadPriority extends Thread   
	{  
	  
				// Method 1  
				// Whenever the start() method is called by a thread  
				// the run() method is invoked  
	public void run()  
	{  
				// the print statement  
			System.out.println("Inside the run() method");  
	}  
	  
	// the main method  
	public static void main(String argvs[])  
	{  
	// Creating threads with the help of ThreadPriority class  
	ThreadPriority th1 = new ThreadPriority();  
	ThreadPriority th2 = new ThreadPriority();  
	ThreadPriority th3 = new ThreadPriority();  
	  
	// We did not mention the priority of the thread.  
	// Therefore, the priorities of the thread is 5, the default value  
	  
	// 1st Thread  
	// Displaying the priority of the thread  
	// using the getPriority() method  
	System.out.println("Priority of the thread th1 is : " + th1.getPriority());  
	  
	// 2nd Thread   
	// Display the priority of the thread  
	System.out.println("Priority of the thread th2 is : " + th2.getPriority());  
	  
	// 3rd Thread   
	// // Display the priority of the thread  
	System.out.println("Priority of the thread th2 is : " + th2.getPriority());  
	  
	// Setting priorities of above threads by  
	// passing integer arguments  
	th1.setPriority(5);  
	th2.setPriority(3);  
	th3.setPriority(9);  
	  
	// 6  
	System.out.println("Priority of the thread th1 is : " + th1.getPriority());  
	  
	// 3  
	System.out.println("Priority of the thread th2 is : " + th2.getPriority());  
	  
	// 9  
	System.out.println("Priority of the thread th3 is : " + th3.getPriority());  
	  
	// Main thread  
	  
	// Displaying name of the currently executing thread   
	System.out.println("Currently Executing The Thread : " + Thread.currentThread().getName());  
	  
	System.out.println("Priority of the main thread is : " + Thread.currentThread().getPriority());  
	  
	// Priority of the main thread is 10 now  
	Thread.currentThread().setPriority(10);  
	  
	System.out.println("Priority of the main thread is : " + Thread.currentThread().getPriority());  
	}  
	}  

-----------------------

output:

Priority of the thread th1 is : 5
Priority of the thread th2 is : 5
Priority of the thread th2 is : 5
Priority of the thread th1 is : 5
Priority of the thread th2 is : 3
Priority of the thread th3 is : 9
Currently Executing The Thread : main
Priority of the main thread is : 5
Priority of the main thread is : 10

---------------------------------------------------------------------

package Day11;


	class Customer
	{    
			int amount=10000;    
		    
			synchronized void withdraw(int amount)
			{    
					System.out.println("going to withdraw...");    
		    
					if(this.amount<amount)
					{    
						System.out.println("Less balance; waiting for deposit...");    
						try{wait();}catch(Exception e){}    
					}    
						this.amount-=amount;    
						System.out.println("withdraw completed...");    
			}    
		    
			synchronized void deposit(int amount)
			{    
					System.out.println("going to deposit...");    
					this.amount+=amount;    
					System.out.println("deposit completed... ");    
					notify();    
			}    
		}    
		    
	public class InterThread
	{    
		public static void main(String args[])
		{    
			final Customer c=new Customer();    
		new Thread()
		{    
			public void run(){c.withdraw(15000);
		}    
			}.start();    
				new Thread()
				{    
					public void run(){c.deposit(10000);}    
				}.start();    
		    
				}			
		}  

-----------------------------------------------------

output:
going to withdraw...
Less balance; waiting for deposit...
going to deposit...
deposit completed... 
withdraw completed...

-------------------------------------------------

package Day11;

import java.util.ArrayList;
import java.util.Iterator;

public class Collection 
{
		 public static void main(String args[])
		 {
				 ArrayList<String> list=new ArrayList<String>();  //creating arraylist
				 list.add("Vinod");   //Adding object in arraylist
				 list.add("chimpu");
				 list.add("karthik");
				 list.add("ramu");
				 list.add("harish");
				Iterator<String> itr=list.iterator(); //Travesing list through iterator
				while(itr.hasNext())
				{
					System.out.println(itr.next());

				}
		}
}


----------------------------------------------

output:

Vinod
chimpu
karthik
ramu
harish


-------------------------------------------------
package Day11;

import java.util.Iterator;
import java.util.LinkedList;

public class CollectionLinked
{
	
		public static void main(String args[])
		{
				LinkedList<String>al=new LinkedList<String>();
				al.add("Virat kohli");
				al.add("chimpu");
				al.add("chesks");
				al.add("cheeku");

				Iterator<String>itr=al.iterator();
				while(itr.hasNext())
				{
					System.out.println(itr.next());
				}
		}
}

------------------------------------

output:

Virat kohli
chimpu
chesks
cheeku


----------------------------------------------

package Day11;

import java.util.Iterator;
import java.util.Vector;

public class CollectionVector 
{
	
		public static void main(String args[])
		{
				Vector<String>v= new Vector <String>();
				v.add("AyushBhodni");
				v.add("RamyaBehara");
				v.add("Raja");
				v.add("Ganesh");
				Iterator<String>itr=v.iterator();
				while(itr.hasNext())
				{
					System.out.println(itr.next());
				}
		}
}


-------------------------------------

output:

AyushBhodni
RamyaBehara
Raja
Ganesh


-------------------------------

package Day11;

import java.util.Iterator;
import java.util.Stack;

public class CollectionStack 
{
	
		public static void main(String args[])
		{
			Stack<String>stack=new Stack<String>();
			stack.push("vinod");// 1st push operation
			stack.push("sweety");// 2nd
			stack.push("sweetyindia");
			stack.pop();
			Iterator<String> itr=stack.iterator();
			while(itr.hasNext())
			{
				System.out.println(itr.next());
			}
		}
}


------------------------------
output:

vinod
sweety

----------------------------------------------------------------

package Day11;
import java.util.*;  

	public class Priority 
	{  
	public static void main(String args[])
	{  
				PriorityQueue<String> queue=new PriorityQueue<String>();  
				queue.add("Amit Sharma");  
				queue.add("Vijay Raj");  
				queue.add("JaiShankar");  
				queue.add("Raj");  
				System.out.println("head:"+queue.element());  
				System.out.println("head:"+queue.peek());  
				System.out.println("iterating the queue elements:");  
				Iterator<String> itr=queue.iterator();  
			while(itr.hasNext())
			{  
				System.out.println(itr.next());  
			}  
				queue.remove();  
				queue.poll();  
				System.out.println("after removing two elements:");  
				Iterator<String> itr2=queue.iterator();  
			while(itr2.hasNext())
			{  
					System.out.println(itr2.next());  
			}  
	}  
	}  


--------------------------------------------

output:

head:Amit Sharma
head:Amit Sharma
iterating the queue elements:
Amit Sharma
Raj
JaiShankar
Vijay Raj
after removing two elements:
Raj
Vijay Raj


--------------------------------------
package Day11;

import java.util.ArrayDeque;
import java.util.Deque;

public class Dequeue {
	
		public static void main (String[]args)
		{
		//creating Deque and adding elements
		Deque<String>deque=new ArrayDeque<String>();
		deque.add("kiran");
		deque.add("Gowthamgambhir");
		deque.add("Ajayjadeja");
		//Traversing elements
		for (String str:deque)
		{
			System.out.println(str);
		}
		}
		}
-------------------------------

output:

kiran
Gowthamgambhir
Ajayjadeja

--------------------------------------------
package Day11;
import java.util.*;
	 
	public class HashSetExample
	{ 
		public static void main(String args[])
		{  
		
			HashSet set=new HashSet();  //Creating HashSet and adding elements   
			set.add("Ravi");  
			set.add("Vijay");  
			set.add("Ravi");  
			set.add("Ajay");  
		
			Iterator<String> itr=set.iterator();  //Traversing elements  
			while(itr.hasNext())
			{  
				System.out.println(itr.next());  
			}  
		}  
		} 


---------------------------------

output:  102 Rahul
100 Amit
101 Vijay

-------------------------------------


import java.util.*;  
class HashMap1
{  
 public static void main(String args[])
{  
   HashMap<Integer,String> hm=new HashMap<Integer,String>();    
    System.out.println("Initial list of elements: "+hm);  
      hm.put(100,"Amit");    
      hm.put(101,"Vijay");    
      hm.put(102,"Rahul");   
       
      System.out.println("After invoking put() method ");  
      for(Map.Entry m:hm.entrySet())
	{    
       System.out.println(m.getKey()+" "+m.getValue());    
      }  
        
      hm.putIfAbsent(103, "Gaurav");  
      System.out.println("After invoking putIfAbsent() method ");  
      for(Map.Entry m:hm.entrySet())
	{    
           System.out.println(m.getKey()+" "+m.getValue());    
          }  
      HashMap<Integer,String> map=new HashMap<Integer,String>();  
      map.put(104,"Ravi");  
      map.putAll(hm);  
      System.out.println("After invoking putAll() method ");  
      for(Map.Entry m:map.entrySet())
	{    
           System.out.println(m.getKey()+" "+m.getValue());    
          }  
 }  


--------------------------------------

output:

Initial list of elements: {}
After invoking put() method 
100 Amit
101 Vijay
102 Rahul
After invoking putIfAbsent() method 
100 Amit
101 Vijay
102 Rahul
103 Gaurav
After invoking putAll() method 
100 Amit
101 Vijay
102 Rahul
103 Gaurav
104 Ravi

----------------------------------------------

package Day11;


	import java.util.*;  
	public class NavigableMap 
	{  
	 public static void main(String args[])
	 {  
	   TreeMap<Integer,String> map=new TreeMap<Integer,String>();    
	      map.put(100,"Amit");    
	      map.put(102,"Ravi");    
	      map.put(101,"Vijay");    
	      map.put(103,"Rahul");    
	        
	      System.out.println("descendingMap: "+map.descendingMap());  
	      System.out.println("headMap: "+map.headMap(102,true));  
	      System.out.println("tailMap: "+map.tailMap(102,true));  
	      System.out.println("subMap: "+map.subMap(100, false, 102, true));   
	 }  
	}  


--------------------------------------

output:

descendingMap: {103=Rahul, 102=Ravi, 101=Vijay, 100=Amit}
headMap: {100=Amit, 101=Vijay, 102=Ravi}
tailMap: {102=Ravi, 103=Rahul}
subMap: {101=Vijay, 102=Ravi}


----------------------------------------------

package Day11;


	import java.util.*;  
	public class SortedMap
	{  
	 public static void main(String args[])
	 {  
	   TreeMap<Integer, String> map=new TreeMap<Integer,String>();    
	      map.put(100,"Amit");    
	      map.put(102,"Ravi");    
	      map.put(101,"Vijay");    
	      map.put(103,"Rahul");    
	      System.out.println("headMap: "+map.headMap(102));  
	      System.out.println("tailMap: "+map.tailMap(102));  
	      System.out.println("subMap: "+map.subMap(100, 102));    
	 }  
	}  


----------------------------------------

output:

headMap: {100=Amit, 101=Vijay}
tailMap: {102=Ravi, 103=Rahul}
subMap: {100=Amit, 101=Vijay}




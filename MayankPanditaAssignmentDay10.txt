DAY 10: FILE HANDLING & MULTITHEARDING

1.)
import java.io.pipedReader,
import java.io.PipedWriter;


public class PipeReaderExample2{
public static  void main(string[] args){
try{

final PipedReader read = new PipedReader();
final PipedWriter write = new PipedWriter(read);

Thread readerThread=new Thread(new runnable(){
public void run(){
try{
 
int data= read.read();
while (data!=-1){
 system.out.println((char)data);
 data=read.read()
}
}catch (Exception ex){
}
}
}};

Thread writerThread=new Thread(new  Runnable(){
publlic void run(){
try {
write.write("I love my country\n".toCharArray());
}catch(Exception ex){
}
}};



readThread.start();
writerThread.start();

}catch(Exception ex){
system.out.println(ex.getMessage());
}
}


output:i love my country


2)


import java.io.PipedReader
import java.io.pipedWriter;


public class PipedReaderExample2{
publlic Static void main(string[] args){
try{


final PipeReader read=new PipedReader();
final Pipedwriter write=new PipedWriter(read);


Thread readerThread=newThread(new runnable(){
public void run(){
try{
in data=read.read();
while(data!=_-1){
system.out.println((char)data);
data=read.read();
}
}catch (Exception ex){
}
}};

Thread writerThread=new Thread(new runnable(){
public void rn(){
try{
write.writer("I love my country\n"o CharArray());
}catch (Excedption ex){
}
}
}};
readerThread.start();
writerThread.strat();

}catch (Exception ex){
system..out.println(ex.getMessagge());
}
}
}
output: I love my country


3)

public class RandomAccessFileExample

static  final string FILEPATH="myfile.TxT";
public static void main(strinng[] args){
try{
system.out.println(new string(readFormFile(FILEPATH,0,18)));
WriteToFile(FILEPATH,"I love my country and my people",31);

}catch (IOException e){
e.printstackTrace();

}
}
private static byte[]readFromFile(String Filepath,int position,int size)
throws IOException{
RandomAccessFile file=new RandomAccessFile(filepath,"r");
file.seek(position);
bytes[]bytes=new bytes[size];
file.read(bytes);
file.close();
return bytes;
}
private static void writeToFile(strinng filepath,string data,intposition)

throws IOExcception
RandomAccessFile file=newRandomAccessFile(filepath,"rw");
file.seek(pposition);
file.write(data.getBytes());
file.close
}
}


4)


importjava.io.*;
class input1{
public static void(string args[])throws Exception{

FileinputStream fin1=newFileInputStream("D:\\testin1.txt");
Fileinputstream fin2=newFileinputStream("D:\\testin2.txt");
Fileoutputstream fout=newFileInputstream("D:\\testout.txt");
sequcenceinputStream sis=newSequcenceInputStream(fin1,fin2);
int i;

while((i=sis.read())!=-1)
{

fout.write(i);
}

sis.close();
fout.close();
fin1.close();
fin2.close();
system.out.priintln("Success..");


}
}

OutPut : Success


5)

package com.javatpoint;  
import java.io.*;    
import java.util.*;    
class Input2{    
public static void main(String args[])throws IOException{    
//creating the FileInputStream objects for all the files    
FileInputStream fin=new FileInputStream("D:\\a.txt");  //welcome  
FileInputStream fin2=new FileInputStream("D:\\b.txt"); //to   
FileInputStream fin3=new FileInputStream("D:\\c.txt");  //java  
FileInputStream fin4=new FileInputStream("D:\\d.txt"); //programming   
//creating Vector object to all the stream    
Vector v=new Vector();    
v.add(fin);    
v.add(fin2);    
v.add(fin3);    
v.add(fin4);              
//creating enumeration object by calling the elements method    
Enumeration e=v.elements();      
//passing the enumeration object in the constructor    
SequenceInputStream bin=new SequenceInputStream(e);    
int i=0;      
while((i=bin.read())!=-1){    
System.out.print((char)i);    
}     
bin.close();    
fin.close();    
fin2.close();    
}    
}    

Output
welcometojavaprogramming


6)
class Multi extends Thread
{  
  public void run()
{  
  System.out.println("thread is running");  
	}  
  public static void main(String args[])
{  
    Multi t1=new Multi();  
     t1.start();  
  }  
	}  



output: thread is running by using runnable ...


7)

class Multi extends Thread
{  
  public void run()
{  
    System.out.println("thread is running...");  
	}  
  public static void main(String args[])
{  
    Multi t1=new Multi();  
     t1.start();  
   }  
     } 

output:

thread is running...






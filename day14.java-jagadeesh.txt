Foreachloop:

import java.util.*;  
public class Foreachloop{  
    public static void main(String[] args) {  
          
        List<String> list=new ArrayList<String>();  
        list.add("pramod");  
        list.add("sai");  
        list.add("pawan");  
        list.add("praveen");  
          
        list.forEach(  
            (n)->System.out.println(n)  
        );  
    }  
}  

Output:
java -cp /tmp/r0sPMGjxde Foreachloop
pramod
sai
pawan
praveen
----------------------------------------------------------------------------------------
single parameter:

interface Says{
public String say(String name);
}
public class SingleParameter{
public static void main(String[] args){

//Lambda expression with single parameter.
Says s1=(name)->{
return "Hello ,"+name;
};
System.out.println(s1.say("sai"));

//you can omit function parentheses
Says s2=(name)->{
return "Hello,"+name;
};
System.out.println(s2.say("pramod"));
}
}

output:
Hello ,si
Hello ,pramod
----------------------------------------------------------------------------------------
multiple paramters:

interface Addable{
int add(int a,int b);
}

public class MultipleParameter{
public static void main(String[] args){

//multiple paramters in lambda expression
Addable ad1=(a,b)->(a+b);
System.out.println(ad1.add(10,20));

//multiple parameters with data type inlambda expression
Addable ad2=(int a,int b)->(a+b);
System.out.println(ad2.add(100,200));
}
}

output:
30
300
--------------------------------------------------------------------------------------------
NoParameter:

interface sayable{
public String say();
}
public class NoParameter{
public static void main(String[] args){
sayable s=()->{
return "i have nothing to say.";
};
System.out.println(s.say());
}
}

 output:
 i have nothing to say
-------------------------------------------------------------------------------------------
LambdaExample:

package Saikumar_day14;
interface Drawable{
public void draw();
}
public class Lambdaexample1 {
	public static void main(String[] args){
		int width= 10;

		//with lambda
		Drawable d2=()->{
		System.out.println("Drawing"+width);
		};
		d2.draw();
		}
}

out put:
Drawing10
----------------------------------------------------------------------------------
Creatingthread:

public class Creatingthread{  
    public static void main(String[] args) {  
      
        //Thread Example without lambda  
        Runnable r1=new Runnable(){  
            public void run(){  
                System.out.println("Thread1 is running...");  
            }  
        };  
        Thread t1=new Thread(r1);  
        t1.start();  
        //Thread Example with lambda  
        Runnable r2=()->{  
                System.out.println("Thread2 is running...");  
        };  
        Thread t2=new Thread(r2);  
        t2.start();  
    }  
}  

output:
Thread1 is running...
Thread2 is running...
----------------------------------------------------------------------------------------
CustomerExample:

import java.util.function.Consumer;  
public class ConsumerEx1 {  
    static void printMessage(String name){  
        System.out.println("Hello "+name);  
    }  
    static void printValue(int val){  
        System.out.println(val);  
    }  
    public static void main(String[] args) {  
        // Referring method to String type Consumer interface   
        Consumer<String> consumer1 = ConsumerEx1::printMessage;  
        consumer1.accept("John");   // Calling Consumer method  
        // Referring method to Integer type Consumer interface  
        Consumer<Integer> consumer2 = ConsumerEx1::printValue;  
        consumer2.accept(12);   // Calling Consumer method  
    }  
}  

Output:
Hello John
12
----------------------------------------------------------------------------------------------
Comparator:

package Saikumar_day14;

import java.util.ArrayList;  
import java.util.Collections;  
import java.util.List;  
class Product{  
    int id;  
    String name;  
    float price;  
    public Product(int id, String name, float price) {  
        super();  
        this.id = id;  
        this.name = name;  
        this.price = price;  
    }  
}  
public class Comparator{  
    public static void main(String[] args) {  
        List<Product> list=new ArrayList<Product>();  
          
        //Adding Products  
        list.add(new Product(1,"HP Laptop",25000f));  
        list.add(new Product(3,"Keyboard",300f));  
        list.add(new Product(2,"Dell Mouse",150f));  
          
        System.out.println("Sorting on the basis of name...");  
  
        // implementing lambda expression  
        Collections.sort(list,(p1,p2)->{  
        return p1.name.compareTo(p2.name);  
        });  
        for(Product p:list){  
            System.out.println(p.id+" "+p.name+" "+p.price);  
        }  
  
    }  
} 

output: 

Sorting on the basis of name...
2 Dell Mouse 150.0
1 HP Laptop 25000.0
3 Keyboard 300.0
-----------------------------------------------------------------------------------------
Multiplestatements

interface Say{  
    String say(String message);  
}  
  
public class Multiplestatements{  
    public static void main(String[] args) {  
      
        // You can pass multiple statements in lambda expression  
        Say person = (message)-> {  
            String str1 = "I would like to say, ";  
            String str2 = str1 + message;   
            return str2;  
        };  
            System.out.println(person.say("time is precious."));  
    }  
}  

output:
I would like to say, time is precious.



import java.util.*;
public class WrapperClassObject{
	public static  void main(String args[]){
		ArrayList al=new ArrayList();
		al.add(Integer.valueOf(201));
		al.add(Integer.valueOf(101));
		al.add(230);//internally will be converted into object as integer.valueOf(230)
		Collections.sort(al);
		Iterator itr=al.iterator();
		while(itr.hasNext()){
			System.out.println(itr.next());
		}
	}
}

/*
Output:
	101
	201
	230

---------------------------------------------------

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
public class CollectionExample{
	public static void main(String a[]){
		List<String> list=new ArrayList<String>();
		list.add("c");
		list.add("Core Java");
		list.add("Advance Java");
		System.out.println("Initial Collection Value:"+list);
		Collections.addAll(list,"servelt","Jsp");
		System.out.println("After adding elements collection value:"+list);
		String[] strArr={"C#",".Net"};
		Collections.addAll(list,strArr);
		System.out.println("After adding array collection value:"+list);
	}
}

--------------------------------------------------------------------

import java.util.*;
public class CollectionExampleMax{
	public static void main(String a[]){
		List<Integer> list=new ArrayList<Integer>();
		list.add(46);
		list.add(67);
		list.add(24);
		list.add(16);
		list.add(8);
		list.add(12);
		System.out.println("Value of maximum elements from the collection:"+Collections.max(list));

	}
}

/*
Output:
	Value of maximum elements from the collection:67

---------------------------------------------------------------------- 
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
public class FailFastDemo{
	public static  void main(String[] args)
	{
		Map<String,String>empName=new HashMap<String,String>();
		empName.put("sam Hanks","New york");
		empName.put("will smith","LA");
		empName.put("Scarlett","Chicago");
		Iterator iterator=empName.keySet().iterator();
		while(iterator.hasNext()){
			System.out.println(empName.get(iterator.next()));
			//adding an element to map
			//exception will be thrown on next call
			//of next()method.
			empName.put("Istanbul","Turkey");
		}
	}
}


/*
Output:
LA
Exception in thread "main" java.util.ConcurrentModificationException
	at java.base/java.util.HashMap$HashIterator.nextNode(HashMap.java:1597)
	at java.base/java.util.HashMap$KeyIterator.next(HashMap.java:1620)
	at FailFastDemo.main(FailFastDemo.java:14)
  
--------------------------------------------------------------------------------


import java.util.concurrent.CopyOnWriteArrayList;   
import java.util.Iterator;   
class FailSafeDemo {   
    public static void main(String args[])   
    {   
        CopyOnWriteArrayList<Integer> list   
            = new CopyOnWriteArrayList<Integer>(new Integer[] { 1, 7, 9, 11 });   
        Iterator itr = list.iterator();   
        while (itr.hasNext()) {   
            Integer i = (Integer)itr.next();   
            System.out.println(i);   
            if (i == 7)   
                list.add(15); // It will not be printed  
            //This means it has created a separate copy of the collection  
        }   
    }   
}   


/*
Output:
1
7
9
11

----------------------------------------------------------------------------

import java.util.concurrent.ConcurrentHashMap;   
import java.util.Iterator;   
public class FailSafeDemo1 {   
    public static void main(String[] args)   
    {   
        // Initializing a ConcurrentHashMap   
        ConcurrentHashMap<String, Integer> m   
            = new ConcurrentHashMap<String, Integer>();   
        m.put("ONE", 1); //Adding values  
        m.put("SEVEN", 7);   
        m.put("FIVE", 5);   
        m.put("EIGHT", 8);   
        // Getting an iterator using map  
        Iterator it = m.keySet().iterator();   
        while (it.hasNext()) {   
            String key = (String)it.next();   
            System.out.println(key + " : " + m.get(key));   
            // This will reflect in iterator.   
            // This means it has not created separate copy of objects  
            m.put("NINE", 9);   
        }   
    }   
} 


/*
Output:
EIGHT : 8
FIVE : 5
NINE : 9
ONE : 1
SEVEN : 7
----------------------------------------------------------
import java.util.*;
public class GenericsExa{
	public static void main(String args[]){
		ArrayList<String> list=new ArrayList<String>();
		list.add("rahul");
		list.add("jai");
		//list.add(32);//Compile time error
		String s=list.get(1);//type casting is  not required
		System.out.println("elemnt is:"+s);
		Iterator<String> itr=list.iterator();
		while(itr.hasNext()){
			System.out.println(itr.next());
		}	
	}
}


/*
Ouput:
elemnt is:jai
rahul
jai	

----------------------------------------------------------------------
import java.util.Arrays;
import java.util.List;
public class LowerBoundWildCards{

	public static void addNumber(List<?super Integer>list) {
		for(Object n:list)
		{
			System.out.println(n);
		}
	}
	public static void main(String[] args){
		List<Integer>l1=Arrays.asList(1,2,3);
		System.out.println("displaying the integer values");
		addNumber(l1);
		List<Number>l2=Arrays.asList(1.0,2.0,3.0);
		System.out.println("displaying the Number values");
		addNumber(l2);
	}
}

/*
Output:
displaying the integer values
1
2
3
displaying the Number values
1.0
2.0
3.0
  
--------------------------------------------------------------------

import java.util.*;
public class SortObjectReverse {
	public static void main(String args[]){
		ArrayList<String> al=new ArrayList<String>();
		al.add("viru");
		al.add ("Saurav");
		al.add("Mukesh");
		al.add("Tahir");
		Collections.sort(al,Collections.reverseOrder());
		Iterator i=al.iterator();
		while(i.hasNext())
		{
			System.out.println(i.next());
		}
	}
}


/*
Output:
viru
Tahir
Saurav
Mukesh
----------------------------------------------------------------

import java.util.*;
public class SortStringObject{
	public static void main(String args[]){
		ArrayList<String> al=new ArrayList<String>();
		al.add("Viru");
		al.add("saurav");
		al.add("Mukesh");
		al.add("Thair");
		Collections.sort(al); 
		Iterator itr=al.iterator();
		while(itr.hasNext()){
			System.out.println(itr.next());
		}
	}
}

/*
Output:
	Mukesh
	Thair
	Viru
        saurav
-------------------------------------------------------------------
import java.util.Arrays;
import java.util.List;
public class UnboundedWildCards{
	public static void display(List<?>list)
	{
		for (Object o:list)
		{
			System.out.println(o);
		}
	}
	public static void main(String[] args){
		List<Integer>l1=Arrays.asList(1,2,3);
		System.out.println("displaying the integer values");
		display(l1);
		List<String>l2=Arrays.asList("One","Two","Three");
		System.out.println("displaying the string  values");
		display(l2);
	}
}

/*
Output:
displaying the integer values
1
2
3
displaying the string  values
One
Two
Three
------------------------------------------------------------------------

import java.util.ArrayList;
public class UpperBoundWildCard{
	private static Double add(ArrayList<?extends Number> nnum){
		double sum=0.0;
		for (Number n:nnum)
		{
			sum=sum+n.doubleValue();
		}
		return sum;
	}
	public static void main(String[] args){
		ArrayList<Integer>l1=new ArrayList<Integer>();
		l1.add(10);
		l1.add(20);
		System.out.println("displaying the sum="+add(l1));
		ArrayList<Double>l2=new ArrayList<Double>();
		l2.add(30.0);
		l2.add(40.0);
		System.out.println("displaying the sum="+add(l2));
	}
}

/*
Output:
	displaying the sum=30.0
	displaying the sum=70.0
-------------------------------------------------------------------------

import java.util.*;  

class Student implements Comparable<Student> {  
    public String name;  
    public Student(String name) {  
    	this.name = name;  
    }  
    public int compareTo(Student person) {  
    	return name.compareTo(person.name);    
    }   
}  
public class UserDefinedSort {  
	public static void main(String[] args) {  
		ArrayList<Student> al=new ArrayList<Student>();  
		al.add(new Student("Viru"));  
		al.add(new Student("Saurav"));  
		al.add(new Student("Mukesh"));  
		al.add(new Student("Tahir"));    
		Collections.sort(al);  
		for (Student s : al) {  
			System.out.println(s.name);  
		}  
	}  
}  

/*
Output:
Mukesh
Saurav
Tahir
Viru
*/ 
---------------------------------------------------------------------
import java.util.*;
abstract class shape{
abstract void draw();
}
class Rectangle extends shape{
	void draw() {System.out.println("drawing rectangle");}
}
class Circle extends shape{
	void draw()	{System.out.println("drawing circle");}
}
public class WildCards{
//creating a method that accepts only child class of shape
	public static void drawShape(List<?extends shape>lists){
		for (shape s:lists){
			s.draw();//calling method of shape class by child class instance
		}
	}
	public static void main(String args[]){
		List<Rectangle>list1=new ArrayList<Rectangle>();
		list1.add(new Rectangle());
		List<Circle>list2=new ArrayList<Circle>();
		list2.add(new Circle());
		list2.add(new Circle());
		drawShape(list1);
		drawShape(list2);
	}
}



/*
Output:
drawing rectangle
drawing circle
drawing circle
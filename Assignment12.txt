
////////////////// Assignment12//////////

 1.Java Collections 

   import java.util.*;  
public class Main {  
    public static void main(String a[]){      
        List<String> list = new ArrayList<String>();  
        list.add("Cycle");  
        list.add("Bike");  
        list.add("Cars");  
        System.out.println("Initial collection value:"+list);  
        Collections.addAll(list, "Bus","Truck");  
        System.out.println("After adding elements collection value:"+list);  
        String[] strArr = {"Brand", "Type"};  
        Collections.addAll(list, strArr);  
        System.out.println("After adding array collection value:"+list);  
    }  
}  

  
Output:
        Initial collection value:[Cycle, Bike, Cars]
        After adding elements collection value:[Cycle, Bike, Cars, Bus, Truck]
        After adding array collection value:[Cycle, Bike, Cars, Bus, Truck, Brand, Type]
  

2. collection for max() & min()


import java.util.*;  
public class Main {  
    public static void main(String a[]){         
        List<Integer> list = new ArrayList<Integer>();  
        list.add(77);  
        list.add(23);  
        list.add(91);  
        list.add(63);  
        list.add(7);  
        list.add(51);  
        System.out.println("Value of maximum element from the collection: "+Collections.max(list));
        System.out.println("Value of minimum element from the collection: "+Collections.min(list));  
    }  
}  


Output:
       Value of maximum element from the collection: 91
       Value of minimum element from the collection: 7


3. sort string objects

   import java.util.*;  
class Main{  
public static void main(String args[]){  
  
ArrayList<String> al=new ArrayList<String>();  
al.add("jyothi");  
al.add("Azeem");  
al.add("charan");  
al.add("sri");  
  
Collections.sort(al);  
Iterator itr=al.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
 }  
}  
}  

Output:
       Azeem
       charan
      jyothi
      sri

4.sort string objects in reverse order

import java.util.*;  
class Main{  
public static void main(String args[]){  
  
ArrayList<String> al=new ArrayList<String>();  
al.add("jyothi");  
al.add("Azeem");  
al.add("charan");  
al.add("sri");  
  
//Collections.sort(al); 
Collections.sort(al,Collections.reverseOrder()); 
Iterator itr=al.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
 }  
}  
}  


Output:
       sri
       jyothi
       charan
       Azeem

5.sort Wrapper class objects
       

   import java.util.*;  
class Main{  
public static void main(String args[]){  
  
ArrayList al=new ArrayList();  
al.add("jyothi");  
al.add("Azeem");  
al.add("charan");  
al.add("sri");  
  
Collections.sort(al); 
Iterator itr=al.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
 }  
}  
}  


Output:
        Azeem
        charan
        jyothi
        sri


6.sort user-defined class objects


import java.util.*;  
  
class Student implements Comparable<Student> {  
    public String name;  
  public Student(String name) {  
    this.name = name;  
  }  
  public int compareTo(Student person) {  
    return name.compareTo(person.name);  
      
  }   
}  
public class Main {  
  public static void main(String[] args) {  
      ArrayList<Student> al=new ArrayList<Student>();  
      al.add(new Student("Jyothi"));  
      al.add(new Student("Mayank"));  
      al.add(new Student("Charan"));  
      al.add(new Student("sri"));  
      
    Collections.sort(al);  
    for (Student s : al) {  
      System.out.println(s.name);  
    }  
  }  
}  

Output:
       Charan
       Jyothi
       Mayank
       sri
 
7.Fail Fast Iterator


   import java.util.HashMap;   
    import java.util.Iterator;   
    import java.util.Map;   
public class Main {
        public static void main(String[] args)   
        {   
            Map<String, String> empName = new HashMap<String, String>();   
            empName.put("charan", "chirala");   
            empName.put("Mayank", "puna");   
            empName.put("Azeem", "vetapalem");   
            Iterator iterator = empName.keySet().iterator();   
            while (iterator.hasNext()) {   
                System.out.println(empName.get(iterator.next()));   
                                empName.put("Naveen", "Hyderabad");   
            }   
        }   
    }   


Output:
         chirala
Exception in thread "main" java.util.ConcurrentModificationException
	at java.base/java.util.HashMap$HashIterator.nextNode(HashMap.java:1493)
	at java.base/java.util.HashMap$KeyIterator.next(HashMap.java:1516)
	at Main.main(Main.java:13)


8.Fail Safe Iterator

import java.util.concurrent.CopyOnWriteArrayList;   
import java.util.Iterator;   
class Main {   
    public static void main(String args[])   
    {   
        CopyOnWriteArrayList<Integer> list   
            = new CopyOnWriteArrayList<Integer>(new Integer[] { 1, 7, 9, 11 });   
        Iterator itr = list.iterator();   
        while (itr.hasNext()) {   
            Integer i = (Integer)itr.next();   
            System.out.println(i);   
            if (i == 7)   
                list.add(15);
    }   
}   
}

Output:
        1
        7
        9
        11



9.Fail Safe Iterator 2

import java.util.concurrent.ConcurrentHashMap;   
import java.util.Iterator;   
public class Main {   
    public static void main(String[] args)   
    {   
           
        ConcurrentHashMap<String, Integer> m   
            = new ConcurrentHashMap<String, Integer>();   
        m.put("seventeen", 17); //Adding values  
        m.put("thirty",30);   
        m.put("fifty", 50);   
        m.put("twentynine",29);   
        
        Iterator it = m.keySet().iterator();   
        while (it.hasNext()) {   
            String key = (String)it.next();   
            System.out.println(key + " : " + m.get(key));   
            m.put("fourtyone", 41);   
        }   
    }   
}  


output:
        seventeen : 17
fifty : 50
fourtyone : 41
twentynine : 29
thirty : 30


10.Generics in Java


import java.util.*;  
class Main{  
public static void main(String args[]){  
ArrayList<String> list=new ArrayList<String>();  
list.add("Jyothi");  
list.add("sri");  
//list.add(32);//compile time error  
  
String s=list.get(1);//type casting is not required  
System.out.println("element is: "+s);  
  
Iterator<String> itr=list.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}  

Output:element is: sri
Jyothi
sri


11.Wildcard in Java Generics


import java.util.*;  
abstract class Shape{  
abstract void draw();  
}  
class Rectangle extends Shape{  
void draw(){System.out.println("drawing rectangle");}  
}  
class Circle extends Shape{  
void draw(){System.out.println("drawing circle");}  
}  
class Main{  
//creating a method that accepts only child class of Shape  
public static void drawShapes(List<? extends Shape> lists){  
for(Shape s:lists){  
s.draw();//calling method of Shape class by child class instance  
}  
}  
public static void main(String args[]){  
List<Rectangle> list1=new ArrayList<Rectangle>();  
list1.add(new Rectangle());  
  
List<Circle> list2=new ArrayList<Circle>();  
list2.add(new Circle());  
list2.add(new Circle());  
  
drawShapes(list1);  
drawShapes(list2);  
}} 

Output:
      drawing rectangle
drawing circle
drawing circle


12.Upper Bounded Wildcards


import java.util.ArrayList;  
  
public class Main {  
  
      
    private static Double add(ArrayList<? extends Number> num) {  
      
        double sum=0.0;  
          
        for(Number n:num)  
        {  
            sum = sum+n.doubleValue();  
        }  
          
        return sum;  
    }  
  
    public static void main(String[] args) {  
          
        ArrayList<Integer> l1=new ArrayList<Integer>();  
        l1.add(10);  
        l1.add(20);  
        System.out.println("displaying the sum= "+add(l1));  
          
        ArrayList<Double> l2=new ArrayList<Double>();  
        l2.add(30.0);  
        l2.add(40.0);  
        System.out.println("displaying the sum= "+add(l2));  
          
          
    }  
      
}  


Output:
        displaying the sum= 30.0
displaying the sum= 70.0


13.Unbounded Wildcards

import java.util.Arrays;  
import java.util.List;  
  
public class UnboundedWildcard {  
  
    public static void display(List<?> list)  
    {  
          
        for(Object o:list)  
        {  
            System.out.println(o);  
        }  
          
    }  
      
      
    public static void main(String[] args) {  
          
    List<Integer> l1=Arrays.asList(1,2,3);  
    System.out.println("displaying the Integer values");  
    display(l1);  
    List<String> l2=Arrays.asList("One","Two","Three");  
      System.out.println("displaying the String values");  
        display(l2);  
    }  
  
}  


Output:
        displaying the Integer values
1
2
3
displaying the String values
One
Two
Three


14.Lower Bounded Wildcards


import java.util.Arrays;  
import java.util.List;  
  
public class Main {  
  
    public static void addNumbers(List<? super Integer> list) {  
  
        for(Object n:list)  
        {  
              System.out.println(n);  
        }  
          
      
          
    }  
public static void main(String[] args) {  
      
    List<Integer> l1=Arrays.asList(1,2,3);  
      System.out.println("displaying the Integer values");  
    addNumbers(l1);  
      
    List<Number> l2=Arrays.asList(1.0,2.0,3.0);  
      System.out.println("displaying the Number values");  
    addNumbers(l2);  
}  
  
}  

output:
       displaying the Integer values
1
2
3
displaying the Number values
1.0
2.0
3.0


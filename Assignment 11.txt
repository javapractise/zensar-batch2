///////////////////////// Assignment11///////////////////////


1.Array list Example 
    

import java.util.*;

public class Main {
   public static void main(String args[]) {
     
      ArrayList<String> obj = new ArrayList<String>();

      /*This is how we add elements to an ArrayList*/
      obj.add("Jyothi");
      obj.add("charan");
      obj.add("Azeem");
      obj.add("Sarath");
      obj.add("mayank");

      // Displaying elements
      System.out.println("Original ArrayList:");
      for(String str:obj)
         System.out.println(str);

            obj.add(0, "nath");
            obj.add(1, "nalam");

      // Displaying elements
      System.out.println("ArrayList after add operation:");
      for(String str:obj)
         System.out.println(str);

      
      obj.remove("Sarath"); 
      obj.remove("mayank"); 

      // Displaying elements
      System.out.println("ArrayList after remove operation:");
      for(String str:obj)
         System.out.println(str);

      
      obj.remove(1); //Removes Second element from the List

      // Displaying elements
      System.out.println("Final ArrayList:");
      for(String str:obj)
         System.out.println(str);
   }
}

Output:
        Original ArrayList:
Jyothi
charan
Azeem
Sarath
mayank
ArrayList after add operation:
nath
nalam
Jyothi
charan
Azeem
Sarath
mayank
ArrayList after remove operation:
nath
nalam
Jyothi
charan
Azeem
Final ArrayList:
nath
Jyothi
charan
Azeem



2. linked List Example 


  import java.util.*;
public class Main {
     public static void main(String args[]) {

       /* Linked List Declaration */
       LinkedList<String> linkedlist = new LinkedList<String>();

       /*add(String Element) is used for adding 
        * the elements to the linked list*/
       linkedlist.add("Item1");
       linkedlist.add("Item5");
       linkedlist.add("Item3");
       linkedlist.add("Item6");
       linkedlist.add("Item2");

       /*Display Linked List Content*/
       System.out.println("Linked List Content: " +linkedlist);

       /*Add First and Last Element*/
       linkedlist.addFirst("First Item");
       linkedlist.addLast("Last Item");
       System.out.println("LinkedList Content after addition: " +linkedlist);

       /*This is how to get and set Values*/
       Object firstvar = linkedlist.get(0);
       System.out.println("First element: " +firstvar);
       linkedlist.set(0, "Changed first item");
       Object firstvar2 = linkedlist.get(0);
       System.out.println("First element after update by set method: " +firstvar2);

       /*Remove first and last element*/
       linkedlist.removeFirst();
       linkedlist.removeLast();
       System.out.println("LinkedList after deletion of first and last element: " +linkedlist);

       /* Add to a Position and remove from a position*/
       linkedlist.add(0, "Newly added item");
       linkedlist.remove(2);
       System.out.println("Final Content: " +linkedlist); 
     }
}


Output:
        Linked List Content: [Item1, Item5, Item3, Item6, Item2]
        LinkedList Content after addition: [First Item, Item1, Item5, Item3, Item6, Item2, Last Item]
        First element: First Item
        First element after update by set method: Changed first item
        LinkedList after deletion of first and last element: [Item1, Item5, Item3, Item6, Item2]
        Final Content: [Newly added item, Item1, Item3, Item6, Item2]



3. vector in java

  
import java.util.*;

public class Main {

   public static void main(String args[]) {
      Vector<String> vec = new Vector<String>(2);

      
      vec.addElement("Apple");
      vec.addElement("Orange");
      vec.addElement("Mango");
      vec.addElement("Grape");

      
      System.out.println("Size is: "+vec.size());
      System.out.println("Default capacity increment is: "+vec.capacity());

      vec.addElement("fruit1");
      vec.addElement("fruit2");
      vec.addElement("fruit3");

      
      System.out.println("Size after addition: "+vec.size());
      System.out.println("Capacity after increment is: "+vec.capacity());

      
      Enumeration en = vec.elements();
      System.out.println("\nElements are:");
      while(en.hasMoreElements())
         System.out.print(en.nextElement() + " ");
   }
}

Output: 
       Size is: 4
      Default capacity increment is: 4
      Size after addition: 7
      Capacity after increment is: 8

      Elements are:
      Apple Orange Mango Grape fruit1 fruit2 fruit3 


4. stack in java

import java.util.Stack;  
public class Main  
{  
public static void main(String[] args)   
{  

Stack<Integer> stk= new Stack<>();  
  
boolean result = stk.empty();  
System.out.println("Is the stack empty? " + result);  

stk.push(78);  
stk.push(113);  
stk.push(90);  
stk.push(120);  
 
System.out.println("Elements in Stack: " + stk);  
result = stk.empty();  
System.out.println("Is the stack empty? " + result);  
}  
}  

Output:
      Is the stack empty? true
      Elements in Stack: [78, 113, 90, 120]
      Is the stack empty? false


5.Priority Queue


   import java.util.*;  
class Main{  
public static void main(String args[]){  
PriorityQueue<String> queue=new PriorityQueue<String>();  
queue.add("Jyothi");  
queue.add("Charan");  
queue.add("Azeem");  
queue.add("Sri");  
queue.add("Hima");  
System.out.println("head:"+queue.element());  
System.out.println("head:"+queue.peek());  
System.out.println("iterating the queue elements:");  
Iterator itr=queue.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
queue.remove();  
queue.poll();  
System.out.println("after removing two elements:");  
Iterator<String> itr2=queue.iterator();  
while(itr2.hasNext()){  
System.out.println(itr2.next());  
}  
}  
}  


Output:
       head:Azeem
       head:Azeem
      iterating the queue elements:
       Azeem
       Hima
       Charan
         Sri
       Jyothi
     after removing two elements:
     Hima
    Sri
    Jyothi


6.ArrayDeque
    

import java.util.*;  
public class ArrayDequeExample {  
   public static void main(String[] args) {  
   //Creating Deque and adding elements  
   Deque<String> deque = new ArrayDeque<String>();  
   deque.add("Ravi");    
   deque.add("Vijay");     
   deque.add("Ajay");    
   //Traversing elements  
   for (String str : deque) {  
   System.out.println(str);  
   }  
   }  
}  

output:
        Jyothi
        Charan
        Azeem
 
7.Hashset Example

   import java.util.HashSet;
public class Main {
   public static void main(String args[]) {
      // HashSet declaration
      HashSet<String> hset = 
               new HashSet<String>();

      // Adding elements to the HashSet
      hset.add("Apple");
      hset.add("Mango");
      hset.add("Grapes");
      hset.add("Orange");
      hset.add("Fig");
      //Addition of duplicate elements
      hset.add("Apple");
      hset.add("Mango");
      //Addition of null values
      hset.add(null);
      hset.add(null);

      //Displaying HashSet elements
      System.out.println(hset);
    }
}

Output:
       [null, Apple, Grapes, Fig, Mango, Orange]


8.Hashmap Example

   import java.util.HashMap;
import java.util.Map;
import java.util.Iterator;
import java.util.Set;
public class Main {

   public static void main(String args[]) {

      /* This is how to declare HashMap */
      HashMap<Integer, String> hmap = new HashMap<Integer, String>();

      /*Adding elements to HashMap*/
      hmap.put(12, "Azeem");
      hmap.put(2, "Sri");
      hmap.put(7, "Jyothi");
      hmap.put(49, "Charan ");
      hmap.put(3, "Mayank");

      /* Display content using Iterator*/
      Set set = hmap.entrySet();
      Iterator iterator = set.iterator();
      while(iterator.hasNext()) {
         Map.Entry mentry = (Map.Entry)iterator.next();
         System.out.print("key is: "+ mentry.getKey() + " & Value is: ");
         System.out.println(mentry.getValue());
      }

      /* Get values based on key*/
      String var= hmap.get(2);
      System.out.println("Value at index 2 is: "+var);

      /* Remove values based on key*/
      hmap.remove(3);
      System.out.println("Map key and values after removal:");
      Set set2 = hmap.entrySet();
      Iterator iterator2 = set2.iterator();
      while(iterator2.hasNext()) {
          Map.Entry mentry2 = (Map.Entry)iterator2.next();
          System.out.print("Key is: "+mentry2.getKey() + " & Value is: ");
          System.out.println(mentry2.getValue());
       }

   }
}


Output:
       key is: 49 & Value is: Charan 
key is: 2 & Value is: Sri
key is: 3 & Value is: Mayank
key is: 7 & Value is: Jyothi
key is: 12 & Value is: Azeem
Value at index 2 is: Sri
Map key and values after removal:
Key is: 49 & Value is: Charan 
Key is: 2 & Value is: Sri
Key is: 7 & Value is: Jyothi
Key is: 12 & Value is: Azeem



9.Treemap Example


import java.util.TreeMap;
import java.util.Set;
import java.util.Iterator;
import java.util.Map;

public class Main {

   public static void main(String args[]) {

      /* This is how to declare TreeMap */
      TreeMap<Integer, String> tmap = 
             new TreeMap<Integer, String>();

      /*Adding elements to TreeMap*/
      tmap.put(1, "Data1");
      tmap.put(23, "Data2");
      tmap.put(70, "Data3");
      tmap.put(4, "Data4");
      tmap.put(2, "Data5");

      /* Display content using Iterator*/
      Set set = tmap.entrySet();
      Iterator iterator = set.iterator();
      while(iterator.hasNext()) {
         Map.Entry mentry = (Map.Entry)iterator.next();
         System.out.print("key is: "+ mentry.getKey() + " & Value is: ");
         System.out.println(mentry.getValue());
      }

   }
}

Output:
       key is: 1 & Value is: Data1
key is: 2 & Value is: Data5
key is: 4 & Value is: Data4
key is: 23 & Value is: Data2
key is: 70 & Value is: Data3


10.Daemon Thread


public class Main extends Thread{  
 public void run(){  
  if(Thread.currentThread().isDaemon()){//checking for daemon thread  
   System.out.println("daemon thread work");  
  }  
  else{  
  System.out.println("user thread work");  
 }  
 }  
 public static void main(String[] args){  
  Main t1=new Main();//creating thread  
  Main t2=new Main();  
  Main t3=new Main();  
  
  t1.setDaemon(true);//now t1 is daemon thread  
    
  t1.start();//starting threads  
  t2.start();  
  t3.start();  
 }  
}  

Output:
      daemon thread work
      user thread work
      user thread work

11.Example 2

  class Main extends Thread{  
 public void run(){  
  System.out.println("Name: "+Thread.currentThread().getName());  
  System.out.println("Daemon: "+Thread.currentThread().isDaemon());  
 }  
  
 public static void main(String[] args){  
  Main t1=new Main();  
  Main t2=new Main();  
  t1.start();  
  t1.setDaemon(true);//will throw exception here  
  t2.start();  
 }  
}  

Output:
       exception in thread main: java.lang.IllegalThreadStateException


12. Priority of a thread

   import java.lang.*;  
  
public class Main extends Thread   
{  
  
// Method 1  
// Whenever the start() method is called by a thread  
// the run() method is invoked  
public void run()  
{  
// the print statement  
System.out.println("Inside the run() method");  
}  
  
// the main method  
public static void main(String argvs[])  
{  
// Creating threads with the help of ThreadPriorityExample class  
 Main th1 = new Main();  
 Main th2 = new Main();  
 Main th3 = new Main();  
  
// We did not mention the priority of the thread.  
// Therefore, the priorities of the thread is 5, the default value  
  
// 1st Thread  
// Displaying the priority of the thread  
// using the getPriority() method  
System.out.println("Priority of the thread th1 is : " + th1.getPriority());  
  
// 2nd Thread   
// Display the priority of the thread  
System.out.println("Priority of the thread th2 is : " + th2.getPriority());  
  
// 3rd Thread   
// // Display the priority of the thread  
System.out.println("Priority of the thread th2 is : " + th2.getPriority());  
  
// Setting priorities of above threads by  
// passing integer arguments  
th1.setPriority(6);  
th2.setPriority(3);  
th3.setPriority(9);  
  
// 6  
System.out.println("Priority of the thread th1 is : " + th1.getPriority());  
  
// 3  
System.out.println("Priority of the thread th2 is : " + th2.getPriority());  
  
// 9  
System.out.println("Priority of the thread th3 is : " + th3.getPriority());  
  
// Main thread  
  
// Displaying name of the currently executing thread   
System.out.println("Currently Executing The Thread : " + Thread.currentThread().getName());  
  
System.out.println("Priority of the main thread is : " + Thread.currentThread().getPriority());  
  
// Priority of the main thread is 10 now  
Thread.currentThread().setPriority(10);  
  
System.out.println("Priority of the main thread is : " + Thread.currentThread().getPriority());  
}  
}  

Output:
        Priority of the thread th1 is : 5
Priority of the thread th2 is : 5
Priority of the thread th2 is : 5
Priority of the thread th1 is : 6
Priority of the thread th2 is : 3
Priority of the thread th3 is : 9
Currently Executing The Thread : main
Priority of the main thread is : 5
Priority of the main thread is : 10


13.
   Inter threadcommunication


class Customer
	{    
			int amount=10000;    
		    
			synchronized void withdraw(int amount)
			{    
					System.out.println("going to withdraw...");    
		    
					if(this.amount<amount)
					{    
						System.out.println("Less balance; waiting for deposit...");    
						try{wait();}catch(Exception e){}    
					}    
						this.amount-=amount;    
						System.out.println("withdraw completed...");    
			}    
		    
			synchronized void deposit(int amount)
			{    
					System.out.println("going to deposit...");    
					this.amount+=amount;    
					System.out.println("deposit completed... ");    
					notify();    
			}    
		}    
		    
	public class InterThread
	{    
		public static void main(String args[])
		{    
			final Customer c=new Customer();    
		new Thread()
		{    
			public void run(){c.withdraw(15000);
		}    
			}.start();    
				new Thread()
				{    
					public void run(){c.deposit(10000);}    
				}.start();    
		    
				}			
		}  



Output:
       going to withdraw...
Less balance; waiting for deposit...
going to deposit...
deposit completed... 
withdraw completed...

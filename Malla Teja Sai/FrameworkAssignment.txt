JAVA COLLECTIONS :-
===================
1.
import java.util.*;
public class CollectionDemo {
    public static void main(String[] args)
    {
        List<String> list = new ArrayList<String>();
        list.add("C");
        list.add("Core Java");
        list.add("Java Collections");
        System.out.println("Manatory for learning");
        Collections.addAll(list,"Servlet","Jdbc");
        System.out.println("After adding elements into collection value: "+list);
        String[] strArr = {"c#", ".Net"};
        Collections.addAll(list,strArr);
        System.out.println("After adding array collection value: "+list);
    }
}
OUTPUT :-
--------
Manatory for learning
After adding elements into collection value: [C, Core Java, Java Collections, Servlet, Jdbc]
After adding array collection value: [C, Core Java, Java Collections, Servlet, Jdbc, c#, .Net]

2. COLLECTIONS USING MAX():-
============================
import java.util.*;
public class CollectionsMax
{
public static void main(String[] args)
{
    List<Integer> list = new ArrayList<Integer>();
    list.add(34);
    list.add(56);
    list.add(76);
    list.add(905);
    list.add(31);
    System.out.println("Value of Maximum elements from the collection: "+Collections.max(list));
}
}
OUTPUT :-
---------
Value of Maximum elements from the collection: 905

3.SORT STRING OBJECTS :-
========================
import java.util.*;
class TestSortTej
{
    public static void main(String[] args)
    {
        ArrayList<String> al = new ArrayList<String>();
        al.add("sehwag");
        al.add("Dhoni");
        al.add("MAlik");
        
        Collections.sort(al);
        Iterator itr = al.iterator();
        while(itr.hasNext())
        {
            System.out.println(itr.next());
        }
        
    }
}

OUTPUT :-
=========
Dhoni
MAlik
sehwag

4.Reverse Sort String :-
========================
import java.util.*;
class TestSortTej
{
    public static void main(String[] args)
    {
        ArrayList<String> al  = new ArrayList<String>();
            al.add("Dhoni");
            al.add("Raina");
            al.add("Jadeja");
            al.add("Patan");
            Collections.sort(al,Collections.reverseOrder());
            Iterator i = al.iterator();
            while(i.hasNext())
            {
                System.out.println(i.next());
            }
    }
}

OUTPUT :-
-----------

Raina
Patan
Jadeja
Dhoni

5.SORT WRAPPER CLASS OBJECT :-
===============================

import java.util.*;
class TestSortTej
{
    public static void main(String[] args)
    {
        ArrayList al = new ArrayList();
        al.add(Integer.valueOf(301));
        al.add(Integer.valueOf(302));
        al.add(420);
        
        Collections.sort(al);
        
        Iterator itr = al.iterator();
        while(itr.hasNext())
        {
            System.out.println(itr.next());
        }
    }
}

OUTPUT :-
---------

301
302
420

6.SORT USER-DEFINED CLASS OBJECTS :-
====================================
import java.util.*;

class Student implements Comparable<Student> 
{
public String name;
public Student(String name)
{
this.name= name;
}
public int compareTo(Student person)
{
return name.compareTo(person.name);

}
}
public class TestSortTej
{
    public static void main(String[] args)
    {
        ArrayList<Student> al = new ArrayList<Student>();
        al.add(new Student("viru"));
        al.add(new Student("peru"));
        al.add(new Student("Raina"));
        
        Collections.sort(al);
        for(Student s: al)
        {
            System.out.println(s.name);
        }
    }
}

OUTPUT :-
---------

Raina
peru
viru

7.FAIL FAST ITERATOR :-
=======================

    import java.util.HashMap;   
    import java.util.Iterator;   
    import java.util.Map;   
public class FailFastDemo {  
        public static void main(String[] args)   
        {   
            Map<String, String> empName = new HashMap<String, String>();   
            empName.put("Sam Hanks", "New york");   
            empName.put("Will Smith", "LA");   
            empName.put("Scarlett", "Chicago");   
            Iterator iterator = empName.keySet().iterator();   
            while (iterator.hasNext()) {   
                System.out.println(empName.get(iterator.next()));   
                empName.put("Istanbul", "Turkey");   
            }   
        }   
    }   

OUTPUT :-
----------

LA
Exception in thread "main" java.util.ConcurrentModificationException
	at java.base/java.util.HashMap$HashIterator.nextNode(HashMap.java:1493)
	at java.base/java.util.HashMap$KeyIterator.next(HashMap.java:1516)
	at FailFastDemo.main(source.java:13)

Process Finished with exit code 1.

8.FAIL SAFE :-
==============
import java.util.concurrent.CopyOnWriteArrayList;   
import java.util.Iterator;   
class FailSafeDemo {   
    public static void main(String args[])   
    {   
        CopyOnWriteArrayList<Integer> list   
            = new CopyOnWriteArrayList<Integer>(new Integer[] { 1, 7, 9, 11, 13 });   
        Iterator itr = list.iterator();   
        while (itr.hasNext()) {   
            Integer i = (Integer)itr.next();   
            System.out.println(i);   
            if (i == 7)   
                list.add(15);   
        }   
    }   
}   

OUTPUT :-
----------
1
7
9
11
13

ii)

import java.util.concurrent.ConcurrentHashMap;   
import java.util.Iterator;   
public class FailSafeDemoTej {
    public static void main(String[] args)
    {
        ConcurrentHashMap<String,Integer> m = new ConcurrentHashMap<String,Integer>();
        m.put("One", 1);
        m.put("Seven", 7);
        m.put("Five", 5);
        m.put("Eleven", 11);
        
        Iterator it = m.keySet().iterator();
        while(it.hasNext())
        {
            String key = (String)it.next();
            System.out.println(key + " : " + m.get(key));
            m.put("Nine", 9);
        }
    }
    
   
}   

OUTPUT :-
---------
Five : 5
One : 1
Nine : 9
Seven : 7
Eleven : 11

9.GENERICS :-
=============
import java.util.*;  
class TestGenericsample{  
public static void main(String args[]){  
ArrayList<String> list=new ArrayList<String>();  
list.add("pobin");  
list.add("prakash");  
String s=list.get(1); 
System.out.println("element is: "+s);  
  
Iterator<String> itr=list.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}  

OUTPUT :-
---------
element is: prakash
pobin
prakash

10.WILD CARDS :-
================
import java.util.*;
abstract class Shape
{
    abstract void draw();
    
}
class Rectangle extends Shape 
{
void draw()
{
System.out.println("Drawing rectangle");
}
}
class Circle extends Shape 
{
void draw()
{
System.out.println("Drawing circle");
}
}
class GenericTest
{
    public static void drawShapes(List<? extends Shape> lists)
    {
        for(Shape s:lists)
        {
            s.draw();
        }
    }
    public static void main(String[] args)
    {
        List<Rectangle> list1 = new ArrayList<Rectangle>();
        list1.add(new Rectangle());
        
        List<Circle> list2 = new ArrayList<Circle>();
        list2.add(new Circle());
        list2.add(new Circle());
        
        drawShapes(list1);
        drawShapes(list2);
    }
}

OUTPUT :-
----------

Drawing rectangle
Drawing circle
Drawing circle

11.UPPER BOUND WILDCARD :-
==========================

import java.util.ArrayList;
public class UpperBoundWildcard 
{
    private static Double add(ArrayList<? extends Number> num)
    {
        double sum = 0.0;
        
        for(Number n:num)
        {
            sum = sum+n.doubleValue();
        }
        
        return sum;
    }
    public static void main(String[] args)
    {
        ArrayList<Integer> I1= new ArrayList<Integer>();
        
        I1.add(20);
        I1.add(40);
        System.out.println("Displaying the sum = "+add(I1));
        
        ArrayList<Double> I2 = new ArrayList<Double>();
        I2.add(60.0);
        I2.add(80.0);
        
        System.out.println("Displaying the Sum = "+add(I2));
    }
}

OUTPUT :-
--------

Displaying the sum = 60.0
Displaying the Sum = 140.0

UNBOUNDED WILDCARDS :-
=====================

import java.util.Arrays;  
import java.util.List;  
  
public class UnboundedWildcard {  
  
    public static void display(List<?> list)  
    {  
          
        for(Object o:list)  
        {  
            System.out.println(o);  
        }  
          
    }  
      
      
    public static void main(String[] args) {  
          
    List<Integer> l1=Arrays.asList(1,2,3);  
    System.out.println("displaying the Integer values");  
    display(l1);  
    List<String> l2=Arrays.asList("One","Two","Three");  
      System.out.println("displaying the String values");  
        display(l2);  
    }  
  
}  

OUTPUT :-
---------
displaying the Integer values
1
2
3
displaying the String values
One
Two
Three

LOWER BOUNDED WILDCARDS :-
=========================

import java.util.Arrays;  
import java.util.List;  
  
public class LowerBoundWildcard {  
  
    public static void addNumbers(List<? super Integer> list) {  
  
        for(Object n:list)  
        {  
              System.out.println(n);  
        }  
          
      
          
    }  
public static void main(String[] args) {  
      
    List<Integer> l1=Arrays.asList(1,2,3,4,5);  
      System.out.println("Displaying the Integer values");  
    addNumbers(l1);  
      
    List<Number> l2=Arrays.asList(1.0,2.0,3.0,4.0,5.0);  
      System.out.println("Displaying the Number values");  
    addNumbers(l2);  
}  
  
}  

OUTPUT :-
--------

Displaying the Integer values
1
2
3
4
5
Displaying the Number values
1.0
2.0
3.0
4.0
5.0
									>>>>> END >>>>>>







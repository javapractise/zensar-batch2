SINGLE INHERITANCE:-


class human {  
void eat(){System.out.println("eating...");
}  
}  
class devash extends human{  
void shout(){System.out.println("shouting...");
}  
}  
class TestInheritance {  
public static void main(String args[]){  
human d=new human();  
d.shout();  
d.eat();  
}
}  



OUTPUT:-
shouting...
eating...

-----------------------------------------------------------------------------------------


MULTIPLE INHERITANCE:-

class human{  
void eat(){System.out.println("eating...");
}  
}  
class Devash extends human{  
void shout(){System.out.println("shouting...");
}  
}  
class Devashdaughter extends Devash{  
void sleep(){System.out.println("sleeping...");
}  
}  
class TestInheritance2{  
public static void main(String args[]){  
Devashdaughter d=new Devashdaughter();  
d.sleep();  
d.shout();  
d.eat();  
}
} 

OUTPUT:-
sleeping...
shouting...
eating... 

-----------------------------------------------------------------------------------------


 MULTILEVEL INHERITANCE:-


class Car{
   public Car()
   {
	System.out.println("Class Car");
   }
   public void vehicleType()
   {
	System.out.println("Vehicle Type: Car");
   }
}
class Maruti extends Car{
   public Maruti()
   {
	System.out.println("Class Maruti");
   }
   public void brand()
   {
	System.out.println("Brand: Maruti");
   }
   public void speed()
   {
	System.out.println("Max: 90Kmph");
   }
}
public class Maruti800 extends Maruti{

   public Maruti800()
   {
	System.out.println("Maruti Model: 800");
   }
   public void speed()
   {
	System.out.println("Max: 80Kmph");
   }
   public static void main(String args[])
   {
	 Maruti800 obj=new Maruti800();
	 obj.vehicleType();
	 obj.brand();
	 obj.speed();
   }
}


OUTPUT:-

Class Car
Class Maruti
Maruti Model: 800
Vehicle Type: Car
Brand: Maruti
Max: 80Kmph


-----------------------------------------------------------------------------------------


HIERARCHICAL INHERITANCE :-

class A
{
   public void methodA()
   {
      System.out.println("method of Class A");
   }
}
class B extends A
{
   public void methodB()
   {
      System.out.println("method of Class B");
   }
}
class C extends A
{
  public void methodC()
  {
     System.out.println("method of Class C");
  }
}
class D extends A
{
  public void methodD()
  {
     System.out.println("method of Class D");
  }
}
class JavaExample
{
  public static void main(String args[])
  {
     B obj1 = new B();
     C obj2 = new C();
     D obj3 = new D();
     //All classes can access the method of class A
     obj1.methodA();
     obj2.methodA();
     obj3.methodA();
  }
}



OUTPUT:-

method of Class A
method of Class A
method of Class A


-----------------------------------------------------------------------------------------

HYBRID INHERITANCE:-

class C
{
   public void disp()
   {
	System.out.println("C");
   }
}

class A extends C
{
   public void disp()
   {
	System.out.println("A");
   }
}

class B extends C
{
   public void disp()
   {
	System.out.println("B");
   }
	
}

class D extends A
{
   public void disp()
   {
	System.out.println("D");
   }
   public static void main(String args[]){

	D obj = new D();
	obj.disp();
   }
}


OUTPUT:-

D
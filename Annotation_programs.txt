#1 ANNOTATION DEPRECATED

class A{  
void m(){System.out.println("hello m");}  
  
@Deprecated  
void n(){System.out.println("hello n");}  
}  
public class AnnoDeprecated {
	public static void main(String args[]){  
		  
		A a=new A();  
		a.n();  
	}
}

Output:
	hello n
--->
#2 ANNOTATION SUPPRESS WARNING

import java.util.*;  
class TestAnnotation2{  
@SuppressWarnings("unchecked")  
public static void main(String args[]){  
ArrayList list=new ArrayList();  
list.add("sonoo");  
list.add("vimal");  
list.add("ratan");  
  
for(Object obj:list)  
System.out.println(obj);  
  
}}  

output:
Now no warning at compile time.
--->
#3 ANNOTATION OVERRIDE

class Animal{  
	void eatSomething(){	
		System.out.println("eating something");
	}  
}  
  
class Dog extends Animal{  
	@Override  
	void eatsomething(){
		System.out.println("eating foods");	
	}//should be eatSomething  
}  
  
public class AnnotationOverride{  
	public static void main(String args[]){  
		Animal a=new Dog();  
		a.eatSomething();  
	}
}  

Output:
   Compier error
--->
#4 ENUM

public class EnumEx {
	public enum season {WINTER,SPRING,SUMMER,FALL}  // defining enum
	public static void main(String args[]) {
		//traversing
		for(season s:season.values()) 
			System.out.println(s);
	}

}

Output:
	WINTER
	SPRING
	SUMMER
	FALL
--->
#5 LOCAL INNER CLASS

public class LocalInner {
	private int data=30;//instance variable  
	 void display(){  
	  class Local{  
	   void msg(){System.out.println(data);}  
	  }  
	  Local l=new Local();  
	  l.msg();  
	 }  
	 public static void main(String args[]){  
		 LocalInner obj=new LocalInner();  
		 obj.display();  
	 }  
}

Output:
	30
--->
#6 ANONYMOUS INNER CLASS

abstract class Person{  
	  abstract void eat();  
}  
public class TestAnonymousinner {
	public static void main(String args[]){  
		  Person p=new Person(){  
			  void eat(){
				  System.out.println("nice fruits");
			  }  
		  };  
		  p.eat();  
	}  
}

Output:
	nice fruits
--->
#7 INNER CLASS

import java.io.PrintStream;
public class InnerClass {
	private int data=30;  
	 class Inner{  
	  void msg(){System.out.println("data is "+data);}  
	 }  
	 public static void main(String args[]){  
	  TestMemberOuter1 obj=new TestMemberOuter1();  
	  TestMemberOuter1.Inner in=obj.new Inner();  
	  in.msg();  
	 }  
}
#@Deprecated
class A{  
void m(){System.out.println("hello main");}  

@Deprecated  
void n(){System.out.println("hello inner");}  
}  
public class AnnoDeprecated {
	public static void main(String args[]){  

		A a=new A();  
		a.n();  
	}
}


Output:
	hello inner


##@SuppressWarnings
import java.util.*;  
public class AnnotationSupress {
	@SuppressWarnings("unchecked")  
	public static void main(String args[]){  
	ArrayList list=new ArrayList();  
	list.add("jaya");  
	list.add("vani");  
	list.add("shivani");  

	for(Object obj:list)  
	System.out.println(obj);  

	}
}


/*
Output:
	jaya
        vani
        shivani

##Enum

public class EnumEx {
	public enum season {JAYSHRI,VANI,SHIVANI,ADITI}  // defining enum
	public static void main(String args[]) {
		//traversing
		for(season s:season.values()) 
			System.out.println(s);
	}

}


/*
Output:
JAYSHRI
VANI
SHIVANI
ADITI

##Inner class
import java.io.PrintStream;
public class InnerClass {
	private int data=30;  
	 class Inner{  
	  void msg(){System.out.println("data is "+data);}  
	 }  
	 public static void main(String args[]){  
	  TestMemberOuter1 obj=new TestMemberOuter1();  
	  TestMemberOuter1.Inner in=obj.new Inner();  
	  in.msg();  
	 }  
}

##Inner interface
interface Eatable{  
	 void eat();  
}  
public class InnerInterface {
	public static void main(String args[]){  
		 Eatable e=new Eatable(){  
			 public void eat(){
				 System.out.println("Good Food");
		  	 }  
		 };  
		 e.eat();  
	}
}



/*
Output:
	Good Food

##public class LocalInner {
	private int data=30;//instance variable  
	 void display(){  
	  class Local{  
	   void msg(){System.out.println(data);}  
	  }  
	  Local l=new Local();  
	  l.msg();  
	 }  
	 public static void main(String args[]){  
		 LocalInner obj=new LocalInner();  
		 obj.display();  
	 }  
}



Output:
	30


##Nested Interface
interface Showable{  
	void show();  
		interface Message{  
		void msg();  
	 }  
}  
public class NestedInterface implements Showable.Message{
	public void msg(){
		System.out.println("nested interface");
	}  
	public static void main(String args[]){  
		Showable.Message message=new NestedInterface();//upcasting here  
		message.msg();  
	 }  
}


Output:
	 nested interface

##TestAnonymous Inner
abstract class Person{  
	  abstract void eat();  
}  
public class TestAnonymousinner {
	public static void main(String args[]){  
		  Person p=new Person(){  
			  void eat(){
				  System.out.println("Done with this");
			  }  
		  };  
		  p.eat();  
	}  
}




Output:
	Done with this

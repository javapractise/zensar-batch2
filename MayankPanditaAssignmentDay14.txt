
1)

interface Addable{  
    int add(int a,int b);  
}  
  
public class LambdaExpressionExample6 {  
    public static void main(String[] args) {  
          
        // Lambda expression without return keyword.  
        Addable ad1=(a,b)->(a+b);  
        System.out.println(ad1.add(10,20));  
          
        // Lambda expression with return keyword.    
        Addable ad2=(int a,int b)->{  
                            return (a+b);   
                            };  
        System.out.println(ad2.add(100,200));  
    }  
}  



OutPut


340330




2)

import java.util.*;  
public class LambdaExpressionExample7{  
    public static void main(String[] args) {  
          
        List<String> list=new ArrayList<String>();  
        list.add("Akash");  
        list.add("Shikhar");  
        list.add("Devesh");  
        list.add("Mayank");  
          
        list.forEach(  
            (n)->System.out.println(n)  
        );  
    }  
} 




OutPut


AkashShikhar
Devesh
Mayank




3)

interface Sayable{  
    String say(String message);  
}  
  
public class LambdaExpressionExample8{  
    public static void main(String[] args) {  
      
        // You can pass multiple statements in lambda expression  
        Sayable person = (message)-> {  
            String str1 = "Shera Shera, ";  
            String str2 = str1 + message;   
            return str2;  
        };  
            System.out.println(person.say("Naushera."));  
    }  
}




OutPut




Shera Shera, Naushera.



4)

public class LambdaExpressionExample9{  
    public static void main(String[] args) {  
      
        //Thread Example without lambda  
        Runnable r1=new Runnable(){  
            public void run(){  
                System.out.println("Thread1 up and running");  
            }  
        };  
        Thread t1=new Thread(r1);  
        t1.start();  
        //Thread Example with lambda  
        Runnable r2=()->{  
                System.out.println("Thread2 up and running");  
        };  
        Thread t2=new Thread(r2);  
        t2.start();  
    }  
}  


OutPut

Thread1 up and running
Thread2 up and running




5)

import java.util.function.Predicate;  
public class PredicateInterfaceExample {  
    public static void main(String[] args) {  
        Predicate<Integer> pr = a -> (a >70 ); // Creating predicate  
        System.out.println(pr.test(75));    // Calling Predicate method    
    }  
} 


OutPut
true




6)

import java.util.function.Predicate;  
public class PredicateInterfaceExample {  
    static Boolean checkAge(int age){  
        if(age>27)  
            return true;  
        else return false;  
    }  
    public static void main(String[] args){  
        // Using Predicate interface  
        Predicate<Integer> predicate =  PredicateInterfaceExample::checkAge;  
        // Calling Predicate method  
        boolean result = predicate.test(25);  
        System.out.println(result);  
    }  
}   


OutPut
false



7)

import java.util.ArrayList;  
import java.util.Collections;  
import java.util.List;  
class Product{  
    int id;  
    String name;  
    float price;  
    public Product(int id, String name, float price) {  
        super();  
        this.id = id;  
        this.name = name;  
        this.price = price;  
    }  
}

  
public class LambdaExpressionExample10{  
    public static void main(String[] args) {  
        List<Product> list=new ArrayList<Product>();  
          
        //Adding Products  
        list.add(new Product(1,"HP Laptop",55000f));  
        list.add(new Product(3,"Keyboard",3000f));  
        list.add(new Product(2,"Dell Mouse",650f));  
          
        System.out.println("Sorting on the basis of name...");  
  
        // implementing lambda expression  
        Collections.sort(list,(p1,p2)->{  
        return p1.name.compareTo(p2.name);  
        });  
        for(Product p:list){  
            System.out.println(p.id+" "+p.name+" "+p.price);  
        }  
  
    }  
}  



OutPut

2 Dell Mouse 650.0
1 HP Laptop 55000.0
3 Keyboard 3000.0




8)

@FunctionalInterface
interface Drawable{
public void draw();
	}
public class Lambda {
public static void main(String[] args){
int width=100;
//with lambda
Drawable d2=() ->{
 System.out.println("Drawing "+width); 
};
d2.draw();
	}
	}


OutPut
Drawing 100



9)

import java.util.function.BiFunction;  
class Arithmetic{  
public int add(int a, int b){  
return a+b;  
}  
}  
public class Main {  
public static void main(String[] args) {  
BiFunction<Integer, Integer, Integer>adder = new Arithmetic()::add;  
int result = adder.apply(45, 53);  
System.out.println(result);  
}  
}  


OutPut

98


10)

public class RunnableLambda {
	 
	  public static void main(String[] args) {  
	   Runnable r2 = null;
		Thread t1=new Thread(r2);  
	    t1.start();  
	    Runnable r21=()->
	    {  
	   System.out.println("Thread101 is up and running");  
	        };  
	        Thread t2=new Thread(r21);  
	        t2.start();  
	    }  
	} 


OutPut

Thread101 is up and running





import java.util.ArrayDeque;
import java.util.Deque;
public class ArrayDequeExa{
	public static void main (String[]args){
		//creating Deque and adding elements
		Deque<String>deque=new ArrayDeque<String>();
		deque.add("vani");
		deque.add("avani");
		deque.add("chaitu");
		//Traversing elements
		for (String str:deque){
			System.out.println(str);
		}
	}
}


/*
Ouput:
	vani
       avani
       chaitu

-------------------------------------------------------------------
import java.util.ArrayList;
import java.util.Iterator;

public class ArrayListExa{
	 public static void main(String args[]){
		 ArrayList<String> list=new ArrayList<String>();//creating arraylist
		 list.add("vani"); //Adding object in arraylist
		 list.add("avani");
		 list.add("chaitu");
		 list.add("sowji");
	//Travesing list through iterator
		 Iterator itr=list.iterator();
		 while(itr.hasNext()){
			 System.out.println(itr.next());

		 }
	 }
}


Output:
vani
avani
chaitu
sowji
--------------------------------------------------------------------
public class DaemonThread extends Thread{
	public void run(){
		if(Thread.currentThread().isDaemon()){//checking for daemon thread
			System.out.println("daemon thread work");
		}
		else{
			System.out.println("user thread work");
		}
	}
	public static void main(String[]args){
		DaemonThread t1=new DaemonThread();//creating thread
		DaemonThread t2=new DaemonThread();
		DaemonThread t3=new DaemonThread();


		t1.setDaemon(true);//now t1 is daemon thread

		t1.start();//starting threads
		t2.start();
		t3.start();
	}
}


/*
Output:
	daemon thread work
	user thread work
	user thread work

---------------------------------------------------------------------
class TestDaemonThread2 extends Thread{
	public void run(){
		System.out.println("Name:"+Thread.currentThread().getName());

		System.out.println("Daemon:"+Thread.currentThread().isDaemon());
	}

	public static void main(String[] args){

		TestDaemonThread2 t1=new TestDaemonThread2();
		TestDaemonThread2 t2=new TestDaemonThread2();
		t1.start();
		t1.setDaemon(true);//will throw exception here 
		t2.start();
	}
}


/*
Output:
	Exception in thread "main" java.lang.IllegalThreadStateException
	at java.base/java.lang.Thread.setDaemon(Thread.java:1403)
	at TestDaemonThread2.main(DaemonThreadEx2.java:14)
	Name:Thread-0
	Daemon:false
--------------------------------------------------------------------------

import java.util.HashMap;
import java.util.Map;

public class HashMapExa {
	public static void main(String args[]){
		HashMap<Integer,String>map=new HashMap<Integer,String>();//creating HasMap
		map.put(1,"Watermelon");//put elements in map
		map.put(2,"Kiwi");
		map.put(3,"Apricot");
		map.put(4,"Cutardapple");
		System.out.println("iterating Hashmap...");
		for(Map.Entry m:map.entrySet()){
		System.out.println(m.getKey()+""+m.getValue());
		}
	}
}


/*
Ouput:
iterating Hashmap...
1Watermelon
2Kiwi
3Apricot
4Custardapple

-----------------------------------------------------------------------------

import java.util.*;  
public class HashSetExa{  
	public static void main(String args[]){  
		//Creating HashSet and adding elements  
		HashSet<String> set=new HashSet<String>();  
		set.add("Vani");  
		set.add("Vamsi");  
		set.add("Ramya");  
		set.add("Vamsi");  
		//Traversing elements  
		Iterator<String> itr=set.iterator();  
		while(itr.hasNext()){  
			System.out.println(itr.next());  
		}  
	}  
}  

/*
Output:
Vani
Vamsi
Ramya
----------------------------------------------------------------------------------

class Customer{    
	int amount=10000;    
    synchronized void withdraw(int amount){    
		System.out.println("going to withdraw...");    
		if(this.amount<amount){    
			System.out.println("Less balance; waiting for deposit...");    
			try{wait();}catch(Exception e){}    
		}    
		this.amount-=amount;    
		System.out.println("withdraw completed...");    
    }    
    synchronized void deposit(int amount){    
		System.out.println("going to deposit...");    
		this.amount+=amount;    
		System.out.println("deposit completed... ");    
		notify();    
	}    
}    

public class InterThreadCommunication{    
	public static void main(String args[]){    
		final Customer c=new Customer();    
		new Thread(){    
			public void run(){c.withdraw(15000);}    
		}.start();    
		new Thread(){    
			public void run(){c.deposit(10000);}    
		}.start();    

	}
}    

/*
Output:
	going to withdraw...
	Less balance; waiting for deposit...
	going to deposit...
	deposit completed... 
	withdraw completed...

-----------------------------------------------------------------------

mport java.util.Iterator;
import java.util.LinkedList;

public class LinkedListExa{
	public static void main(String args[]){
		LinkedList<String>al=new LinkedList<String>();
		al.add("Manu");
		al.add("Nitya");
		al.add("Madhu");
		al.add("Siva");
		Iterator<String>itr=al.iterator();
		while(itr.hasNext()){
			System.out.println(itr.next());
		}
	}
}


/*
Output:
Manu
Nitya
Madhu
Siva
------------------------------------------------------------------------

import java.util.*;  
public class PriorityQueueExa{  
	public static void main(String args[]){  
		PriorityQueue<String> queue=new PriorityQueue<String>();  
		queue.add("Kaushik");  
		queue.add("Vijay Raj");  
		queue.add("JaiShankar");  
		queue.add("Raj");  
		System.out.println("head:"+queue.element());  
		System.out.println("head:"+queue.peek());  
		System.out.println("iterating the queue elements:");  
		Iterator itr=queue.iterator();  
		while(itr.hasNext()){  
			System.out.println(itr.next());  
		}  
		queue.remove();  
		queue.poll();  
		System.out.println("after removing two elements:");  
		Iterator<String> itr2=queue.iterator();  
		while(itr2.hasNext()){  
			System.out.println(itr2.next());  
		}  
	}  
}  



/*
Output:
	head:Kaushik
	head:Kaushik
	iterating the queue elements:
	Kaushik
	Raj
	JaiShankar
	Vijay Raj
	after removing two elements:
	Raj
	Vijay Raj

------------------------------------------------------------------------------

import java.util.Iterator;
import java.util.Stack;

public class StatckExa{
	public static void main(String args[]){
		Stack<String>stack=new Stack<String>();
		stack.push("Neeha");
		stack.push("Niharika");
		stack.pop();
		Iterator<String> itr=stack.iterator();
		while(itr.hasNext()){
			System.out.println(itr.next());
		}
	}
}

/*
Output:
	Neeha

------------------------------------------------------------------------------

public class ThreadPriority extends Thread   
{  

// Method 1  
// Whenever the start() method is called by a thread  
// the run() method is invoked  
public void run()  
{  
// the print statement  
System.out.println("Inside the run() method");  
}  

// the main method  
public static void main(String argvs[])  
{  
// Creating threads with the help of ThreadPriorityExample class  
ThreadPriority th1 = new ThreadPriority();  
ThreadPriority th2 = new ThreadPriority();  
ThreadPriority th3 = new ThreadPriority();  

// We did not mention the priority of the thread.  
// Therefore, the priorities of the thread is 5, the default value  

// 1st Thread  
// Displaying the priority of the thread  
// using the getPriority() method  
System.out.println("Priority of the thread th1 is : " + th1.getPriority());  

// 2nd Thread   
// Display the priority of the thread  
System.out.println("Priority of the thread th2 is : " + th2.getPriority());  

// 3rd Thread   
// // Display the priority of the thread  
System.out.println("Priority of the thread th2 is : " + th2.getPriority());  

// Setting priorities of above threads by  
// passing integer arguments  
th1.setPriority(6);  
th2.setPriority(3);  
th3.setPriority(9);  

// 6  
System.out.println("Priority of the thread th1 is : " + th1.getPriority());  

// 3  
System.out.println("Priority of the thread th2 is : " + th2.getPriority());  

// 9  
System.out.println("Priority of the thread th3 is : " + th3.getPriority());  

// Main thread  

// Displaying name of the currently executing thread   
System.out.println("Currently Executing The Thread : " + Thread.currentThread().getName());  

System.out.println("Priority of the main thread is : " + Thread.currentThread().getPriority());  

// Priority of the main thread is 10 now  
Thread.currentThread().setPriority(10);  

System.out.println("Priority of the main thread is : " + Thread.currentThread().getPriority());  
}  
}  



/*
Output:
	Priority of the thread th1 is : 5
	Priority of the thread th2 is : 5
	Priority of the thread th2 is : 5
	Priority of the thread th1 is : 6
	Priority of the thread th2 is : 3
	Priority of the thread th3 is : 9
	Currently Executing The Thread : main
	Priority of the main thread is : 5
	Priority of the main thread is : 10

-----------------------------------------------------------------------------------------------------

